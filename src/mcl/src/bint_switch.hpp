// this code is generated by python3 src/gen_bint_header.py switch
#if MCL_BINT_ASM != 1
template Unit addT<1>(Unit *z, const Unit *x, const Unit *y);
template Unit addT<2>(Unit *z, const Unit *x, const Unit *y);
template Unit addT<3>(Unit *z, const Unit *x, const Unit *y);
template Unit addT<4>(Unit *z, const Unit *x, const Unit *y);
template Unit addT<5>(Unit *z, const Unit *x, const Unit *y);
template Unit addT<6>(Unit *z, const Unit *x, const Unit *y);
template Unit addT<7>(Unit *z, const Unit *x, const Unit *y);
template Unit addT<8>(Unit *z, const Unit *x, const Unit *y);
template Unit addT<9>(Unit *z, const Unit *x, const Unit *y);
template Unit addT<10>(Unit *z, const Unit *x, const Unit *y);
template Unit addT<11>(Unit *z, const Unit *x, const Unit *y);
template Unit addT<12>(Unit *z, const Unit *x, const Unit *y);
template Unit addT<13>(Unit *z, const Unit *x, const Unit *y);
template Unit addT<14>(Unit *z, const Unit *x, const Unit *y);
template Unit addT<15>(Unit *z, const Unit *x, const Unit *y);
template Unit addT<16>(Unit *z, const Unit *x, const Unit *y);
#if MCL_SIZEOF_UNIT == 4
template Unit addT<17>(Unit *z, const Unit *x, const Unit *y);
template Unit addT<18>(Unit *z, const Unit *x, const Unit *y);
template Unit addT<19>(Unit *z, const Unit *x, const Unit *y);
template Unit addT<20>(Unit *z, const Unit *x, const Unit *y);
template Unit addT<21>(Unit *z, const Unit *x, const Unit *y);
template Unit addT<22>(Unit *z, const Unit *x, const Unit *y);
template Unit addT<23>(Unit *z, const Unit *x, const Unit *y);
template Unit addT<24>(Unit *z, const Unit *x, const Unit *y);
template Unit addT<25>(Unit *z, const Unit *x, const Unit *y);
template Unit addT<26>(Unit *z, const Unit *x, const Unit *y);
template Unit addT<27>(Unit *z, const Unit *x, const Unit *y);
template Unit addT<28>(Unit *z, const Unit *x, const Unit *y);
template Unit addT<29>(Unit *z, const Unit *x, const Unit *y);
template Unit addT<30>(Unit *z, const Unit *x, const Unit *y);
template Unit addT<31>(Unit *z, const Unit *x, const Unit *y);
#endif
template Unit subT<1>(Unit *z, const Unit *x, const Unit *y);
template Unit subT<2>(Unit *z, const Unit *x, const Unit *y);
template Unit subT<3>(Unit *z, const Unit *x, const Unit *y);
template Unit subT<4>(Unit *z, const Unit *x, const Unit *y);
template Unit subT<5>(Unit *z, const Unit *x, const Unit *y);
template Unit subT<6>(Unit *z, const Unit *x, const Unit *y);
template Unit subT<7>(Unit *z, const Unit *x, const Unit *y);
template Unit subT<8>(Unit *z, const Unit *x, const Unit *y);
template Unit subT<9>(Unit *z, const Unit *x, const Unit *y);
template Unit subT<10>(Unit *z, const Unit *x, const Unit *y);
template Unit subT<11>(Unit *z, const Unit *x, const Unit *y);
template Unit subT<12>(Unit *z, const Unit *x, const Unit *y);
template Unit subT<13>(Unit *z, const Unit *x, const Unit *y);
template Unit subT<14>(Unit *z, const Unit *x, const Unit *y);
template Unit subT<15>(Unit *z, const Unit *x, const Unit *y);
template Unit subT<16>(Unit *z, const Unit *x, const Unit *y);
#if MCL_SIZEOF_UNIT == 4
template Unit subT<17>(Unit *z, const Unit *x, const Unit *y);
template Unit subT<18>(Unit *z, const Unit *x, const Unit *y);
template Unit subT<19>(Unit *z, const Unit *x, const Unit *y);
template Unit subT<20>(Unit *z, const Unit *x, const Unit *y);
template Unit subT<21>(Unit *z, const Unit *x, const Unit *y);
template Unit subT<22>(Unit *z, const Unit *x, const Unit *y);
template Unit subT<23>(Unit *z, const Unit *x, const Unit *y);
template Unit subT<24>(Unit *z, const Unit *x, const Unit *y);
template Unit subT<25>(Unit *z, const Unit *x, const Unit *y);
template Unit subT<26>(Unit *z, const Unit *x, const Unit *y);
template Unit subT<27>(Unit *z, const Unit *x, const Unit *y);
template Unit subT<28>(Unit *z, const Unit *x, const Unit *y);
template Unit subT<29>(Unit *z, const Unit *x, const Unit *y);
template Unit subT<30>(Unit *z, const Unit *x, const Unit *y);
template Unit subT<31>(Unit *z, const Unit *x, const Unit *y);
#endif
template void addNFT<1>(Unit *z, const Unit *x, const Unit *y);
template void addNFT<2>(Unit *z, const Unit *x, const Unit *y);
template void addNFT<3>(Unit *z, const Unit *x, const Unit *y);
template void addNFT<4>(Unit *z, const Unit *x, const Unit *y);
template void addNFT<5>(Unit *z, const Unit *x, const Unit *y);
template void addNFT<6>(Unit *z, const Unit *x, const Unit *y);
template void addNFT<7>(Unit *z, const Unit *x, const Unit *y);
template void addNFT<8>(Unit *z, const Unit *x, const Unit *y);
template void addNFT<9>(Unit *z, const Unit *x, const Unit *y);
template void addNFT<10>(Unit *z, const Unit *x, const Unit *y);
template void addNFT<11>(Unit *z, const Unit *x, const Unit *y);
template void addNFT<12>(Unit *z, const Unit *x, const Unit *y);
template void addNFT<13>(Unit *z, const Unit *x, const Unit *y);
template void addNFT<14>(Unit *z, const Unit *x, const Unit *y);
template void addNFT<15>(Unit *z, const Unit *x, const Unit *y);
template void addNFT<16>(Unit *z, const Unit *x, const Unit *y);
#if MCL_SIZEOF_UNIT == 4
template void addNFT<17>(Unit *z, const Unit *x, const Unit *y);
template void addNFT<18>(Unit *z, const Unit *x, const Unit *y);
template void addNFT<19>(Unit *z, const Unit *x, const Unit *y);
template void addNFT<20>(Unit *z, const Unit *x, const Unit *y);
template void addNFT<21>(Unit *z, const Unit *x, const Unit *y);
template void addNFT<22>(Unit *z, const Unit *x, const Unit *y);
template void addNFT<23>(Unit *z, const Unit *x, const Unit *y);
template void addNFT<24>(Unit *z, const Unit *x, const Unit *y);
template void addNFT<25>(Unit *z, const Unit *x, const Unit *y);
template void addNFT<26>(Unit *z, const Unit *x, const Unit *y);
template void addNFT<27>(Unit *z, const Unit *x, const Unit *y);
template void addNFT<28>(Unit *z, const Unit *x, const Unit *y);
template void addNFT<29>(Unit *z, const Unit *x, const Unit *y);
template void addNFT<30>(Unit *z, const Unit *x, const Unit *y);
template void addNFT<31>(Unit *z, const Unit *x, const Unit *y);
#endif
template Unit subNFT<1>(Unit *z, const Unit *x, const Unit *y);
template Unit subNFT<2>(Unit *z, const Unit *x, const Unit *y);
template Unit subNFT<3>(Unit *z, const Unit *x, const Unit *y);
template Unit subNFT<4>(Unit *z, const Unit *x, const Unit *y);
template Unit subNFT<5>(Unit *z, const Unit *x, const Unit *y);
template Unit subNFT<6>(Unit *z, const Unit *x, const Unit *y);
template Unit subNFT<7>(Unit *z, const Unit *x, const Unit *y);
template Unit subNFT<8>(Unit *z, const Unit *x, const Unit *y);
template Unit subNFT<9>(Unit *z, const Unit *x, const Unit *y);
template Unit subNFT<10>(Unit *z, const Unit *x, const Unit *y);
template Unit subNFT<11>(Unit *z, const Unit *x, const Unit *y);
template Unit subNFT<12>(Unit *z, const Unit *x, const Unit *y);
template Unit subNFT<13>(Unit *z, const Unit *x, const Unit *y);
template Unit subNFT<14>(Unit *z, const Unit *x, const Unit *y);
template Unit subNFT<15>(Unit *z, const Unit *x, const Unit *y);
template Unit subNFT<16>(Unit *z, const Unit *x, const Unit *y);
#if MCL_SIZEOF_UNIT == 4
template Unit subNFT<17>(Unit *z, const Unit *x, const Unit *y);
template Unit subNFT<18>(Unit *z, const Unit *x, const Unit *y);
template Unit subNFT<19>(Unit *z, const Unit *x, const Unit *y);
template Unit subNFT<20>(Unit *z, const Unit *x, const Unit *y);
template Unit subNFT<21>(Unit *z, const Unit *x, const Unit *y);
template Unit subNFT<22>(Unit *z, const Unit *x, const Unit *y);
template Unit subNFT<23>(Unit *z, const Unit *x, const Unit *y);
template Unit subNFT<24>(Unit *z, const Unit *x, const Unit *y);
template Unit subNFT<25>(Unit *z, const Unit *x, const Unit *y);
template Unit subNFT<26>(Unit *z, const Unit *x, const Unit *y);
template Unit subNFT<27>(Unit *z, const Unit *x, const Unit *y);
template Unit subNFT<28>(Unit *z, const Unit *x, const Unit *y);
template Unit subNFT<29>(Unit *z, const Unit *x, const Unit *y);
template Unit subNFT<30>(Unit *z, const Unit *x, const Unit *y);
template Unit subNFT<31>(Unit *z, const Unit *x, const Unit *y);
#endif
template Unit mulUnitT<1>(Unit *z, const Unit *x, Unit y);
template Unit mulUnitT<2>(Unit *z, const Unit *x, Unit y);
template Unit mulUnitT<3>(Unit *z, const Unit *x, Unit y);
template Unit mulUnitT<4>(Unit *z, const Unit *x, Unit y);
template Unit mulUnitT<5>(Unit *z, const Unit *x, Unit y);
template Unit mulUnitT<6>(Unit *z, const Unit *x, Unit y);
template Unit mulUnitT<7>(Unit *z, const Unit *x, Unit y);
template Unit mulUnitT<8>(Unit *z, const Unit *x, Unit y);
template Unit mulUnitT<9>(Unit *z, const Unit *x, Unit y);
#if MCL_SIZEOF_UNIT == 4
template Unit mulUnitT<10>(Unit *z, const Unit *x, Unit y);
template Unit mulUnitT<11>(Unit *z, const Unit *x, Unit y);
template Unit mulUnitT<12>(Unit *z, const Unit *x, Unit y);
template Unit mulUnitT<13>(Unit *z, const Unit *x, Unit y);
template Unit mulUnitT<14>(Unit *z, const Unit *x, Unit y);
template Unit mulUnitT<15>(Unit *z, const Unit *x, Unit y);
template Unit mulUnitT<16>(Unit *z, const Unit *x, Unit y);
#endif
template Unit mulUnitAddT<1>(Unit *z, const Unit *x, Unit y);
template Unit mulUnitAddT<2>(Unit *z, const Unit *x, Unit y);
template Unit mulUnitAddT<3>(Unit *z, const Unit *x, Unit y);
template Unit mulUnitAddT<4>(Unit *z, const Unit *x, Unit y);
template Unit mulUnitAddT<5>(Unit *z, const Unit *x, Unit y);
template Unit mulUnitAddT<6>(Unit *z, const Unit *x, Unit y);
template Unit mulUnitAddT<7>(Unit *z, const Unit *x, Unit y);
template Unit mulUnitAddT<8>(Unit *z, const Unit *x, Unit y);
template Unit mulUnitAddT<9>(Unit *z, const Unit *x, Unit y);
#if MCL_SIZEOF_UNIT == 4
template Unit mulUnitAddT<10>(Unit *z, const Unit *x, Unit y);
template Unit mulUnitAddT<11>(Unit *z, const Unit *x, Unit y);
template Unit mulUnitAddT<12>(Unit *z, const Unit *x, Unit y);
template Unit mulUnitAddT<13>(Unit *z, const Unit *x, Unit y);
template Unit mulUnitAddT<14>(Unit *z, const Unit *x, Unit y);
template Unit mulUnitAddT<15>(Unit *z, const Unit *x, Unit y);
template Unit mulUnitAddT<16>(Unit *z, const Unit *x, Unit y);
#endif
template void mulT<1>(Unit *z, const Unit *x, const Unit *y);
template void mulT<2>(Unit *z, const Unit *x, const Unit *y);
template void mulT<3>(Unit *z, const Unit *x, const Unit *y);
template void mulT<4>(Unit *z, const Unit *x, const Unit *y);
template void mulT<5>(Unit *z, const Unit *x, const Unit *y);
template void mulT<6>(Unit *z, const Unit *x, const Unit *y);
template void mulT<7>(Unit *z, const Unit *x, const Unit *y);
template void mulT<8>(Unit *z, const Unit *x, const Unit *y);
template void mulT<9>(Unit *z, const Unit *x, const Unit *y);
#if MCL_SIZEOF_UNIT == 4
template void mulT<10>(Unit *z, const Unit *x, const Unit *y);
template void mulT<11>(Unit *z, const Unit *x, const Unit *y);
template void mulT<12>(Unit *z, const Unit *x, const Unit *y);
template void mulT<13>(Unit *z, const Unit *x, const Unit *y);
template void mulT<14>(Unit *z, const Unit *x, const Unit *y);
template void mulT<15>(Unit *z, const Unit *x, const Unit *y);
template void mulT<16>(Unit *z, const Unit *x, const Unit *y);
#endif
template void sqrT<1>(Unit *y, const Unit *x);
template void sqrT<2>(Unit *y, const Unit *x);
template void sqrT<3>(Unit *y, const Unit *x);
template void sqrT<4>(Unit *y, const Unit *x);
template void sqrT<5>(Unit *y, const Unit *x);
template void sqrT<6>(Unit *y, const Unit *x);
template void sqrT<7>(Unit *y, const Unit *x);
template void sqrT<8>(Unit *y, const Unit *x);
template void sqrT<9>(Unit *y, const Unit *x);
#if MCL_SIZEOF_UNIT == 4
template void sqrT<10>(Unit *y, const Unit *x);
template void sqrT<11>(Unit *y, const Unit *x);
template void sqrT<12>(Unit *y, const Unit *x);
template void sqrT<13>(Unit *y, const Unit *x);
template void sqrT<14>(Unit *y, const Unit *x);
template void sqrT<15>(Unit *y, const Unit *x);
template void sqrT<16>(Unit *y, const Unit *x);
#endif
#endif // MCL_BINT_ASM != 1
#if MCL_BINT_ASM_X64 == 1
u_ppu mclb_mulUnit1 = mclb_mulUnit_fast1;
u_ppu mclb_mulUnitAdd1 = mclb_mulUnitAdd_fast1;
void_ppp mclb_mul1 = mclb_mul_fast1;
void_pp mclb_sqr1 = mclb_sqr_fast1;
u_ppu mclb_mulUnit2 = mclb_mulUnit_fast2;
u_ppu mclb_mulUnitAdd2 = mclb_mulUnitAdd_fast2;
void_ppp mclb_mul2 = mclb_mul_fast2;
void_pp mclb_sqr2 = mclb_sqr_fast2;
u_ppu mclb_mulUnit3 = mclb_mulUnit_fast3;
u_ppu mclb_mulUnitAdd3 = mclb_mulUnitAdd_fast3;
void_ppp mclb_mul3 = mclb_mul_fast3;
void_pp mclb_sqr3 = mclb_sqr_fast3;
u_ppu mclb_mulUnit4 = mclb_mulUnit_fast4;
u_ppu mclb_mulUnitAdd4 = mclb_mulUnitAdd_fast4;
void_ppp mclb_mul4 = mclb_mul_fast4;
void_pp mclb_sqr4 = mclb_sqr_fast4;
u_ppu mclb_mulUnit5 = mclb_mulUnit_fast5;
u_ppu mclb_mulUnitAdd5 = mclb_mulUnitAdd_fast5;
void_ppp mclb_mul5 = mclb_mul_fast5;
void_pp mclb_sqr5 = mclb_sqr_fast5;
u_ppu mclb_mulUnit6 = mclb_mulUnit_fast6;
u_ppu mclb_mulUnitAdd6 = mclb_mulUnitAdd_fast6;
void_ppp mclb_mul6 = mclb_mul_fast6;
void_pp mclb_sqr6 = mclb_sqr_fast6;
u_ppu mclb_mulUnit7 = mclb_mulUnit_fast7;
u_ppu mclb_mulUnitAdd7 = mclb_mulUnitAdd_fast7;
void_ppp mclb_mul7 = mclb_mul_fast7;
void_pp mclb_sqr7 = mclb_sqr_fast7;
u_ppu mclb_mulUnit8 = mclb_mulUnit_fast8;
u_ppu mclb_mulUnitAdd8 = mclb_mulUnitAdd_fast8;
void_ppp mclb_mul8 = mclb_mul_fast8;
void_pp mclb_sqr8 = mclb_sqr_fast8;
u_ppu mclb_mulUnit9 = mclb_mulUnit_fast9;
u_ppu mclb_mulUnitAdd9 = mclb_mulUnitAdd_fast9;
void_ppp mclb_mul9 = mclb_mul_fast9;
void_pp mclb_sqr9 = mclb_sqr_fast9;
extern "C" MCL_DLL_API void mclb_disable_fast() {
	mclb_mulUnit1 = mclb_mulUnit_slow1;
	mclb_mulUnitAdd1 = mclb_mulUnitAdd_slow1;
	mclb_mul1 = mclb_mul_slow1;
	mclb_sqr1 = mclb_sqr_slow1;
	mclb_mulUnit2 = mclb_mulUnit_slow2;
	mclb_mulUnitAdd2 = mclb_mulUnitAdd_slow2;
	mclb_mul2 = mclb_mul_slow2;
	mclb_sqr2 = mclb_sqr_slow2;
	mclb_mulUnit3 = mclb_mulUnit_slow3;
	mclb_mulUnitAdd3 = mclb_mulUnitAdd_slow3;
	mclb_mul3 = mclb_mul_slow3;
	mclb_sqr3 = mclb_sqr_slow3;
	mclb_mulUnit4 = mclb_mulUnit_slow4;
	mclb_mulUnitAdd4 = mclb_mulUnitAdd_slow4;
	mclb_mul4 = mclb_mul_slow4;
	mclb_sqr4 = mclb_sqr_slow4;
	mclb_mulUnit5 = mclb_mulUnit_slow5;
	mclb_mulUnitAdd5 = mclb_mulUnitAdd_slow5;
	mclb_mul5 = mclb_mul_slow5;
	mclb_sqr5 = mclb_sqr_slow5;
	mclb_mulUnit6 = mclb_mulUnit_slow6;
	mclb_mulUnitAdd6 = mclb_mulUnitAdd_slow6;
	mclb_mul6 = mclb_mul_slow6;
	mclb_sqr6 = mclb_sqr_slow6;
	mclb_mulUnit7 = mclb_mulUnit_slow7;
	mclb_mulUnitAdd7 = mclb_mulUnitAdd_slow7;
	mclb_mul7 = mclb_mul_slow7;
	mclb_sqr7 = mclb_sqr_slow7;
	mclb_mulUnit8 = mclb_mulUnit_slow8;
	mclb_mulUnitAdd8 = mclb_mulUnitAdd_slow8;
	mclb_mul8 = mclb_mul_slow8;
	mclb_sqr8 = mclb_sqr_slow8;
	mclb_mulUnit9 = mclb_mulUnit_slow9;
	mclb_mulUnitAdd9 = mclb_mulUnitAdd_slow9;
	mclb_mul9 = mclb_mul_slow9;
	mclb_sqr9 = mclb_sqr_slow9;
}
#endif // MCL_BINT_ASM_X64 == 1
#if MCL_BINT_ASM_X64 == 1
extern "C" void mclb_mul_slow1(Unit *z, const Unit *x, const Unit *y)
{
	z[1] = mulUnitT<1>(z, x, y[0]);
	for (size_t i = 1; i < 1; i++) {
		z[1 + i] = mulUnitAddT<1>(&z[i], x, y[i]);
	}
}
extern "C" void mclb_mul_slow2(Unit *z, const Unit *x, const Unit *y)
{
	z[2] = mulUnitT<2>(z, x, y[0]);
	for (size_t i = 1; i < 2; i++) {
		z[2 + i] = mulUnitAddT<2>(&z[i], x, y[i]);
	}
}
extern "C" void mclb_mul_slow3(Unit *z, const Unit *x, const Unit *y)
{
	z[3] = mulUnitT<3>(z, x, y[0]);
	for (size_t i = 1; i < 3; i++) {
		z[3 + i] = mulUnitAddT<3>(&z[i], x, y[i]);
	}
}
extern "C" void mclb_mul_slow4(Unit *z, const Unit *x, const Unit *y)
{
	z[4] = mulUnitT<4>(z, x, y[0]);
	for (size_t i = 1; i < 4; i++) {
		z[4 + i] = mulUnitAddT<4>(&z[i], x, y[i]);
	}
}
extern "C" void mclb_mul_slow5(Unit *z, const Unit *x, const Unit *y)
{
	z[5] = mulUnitT<5>(z, x, y[0]);
	for (size_t i = 1; i < 5; i++) {
		z[5 + i] = mulUnitAddT<5>(&z[i], x, y[i]);
	}
}
extern "C" void mclb_mul_slow6(Unit *z, const Unit *x, const Unit *y)
{
	z[6] = mulUnitT<6>(z, x, y[0]);
	for (size_t i = 1; i < 6; i++) {
		z[6 + i] = mulUnitAddT<6>(&z[i], x, y[i]);
	}
}
extern "C" void mclb_mul_slow7(Unit *z, const Unit *x, const Unit *y)
{
	z[7] = mulUnitT<7>(z, x, y[0]);
	for (size_t i = 1; i < 7; i++) {
		z[7 + i] = mulUnitAddT<7>(&z[i], x, y[i]);
	}
}
extern "C" void mclb_mul_slow8(Unit *z, const Unit *x, const Unit *y)
{
	z[8] = mulUnitT<8>(z, x, y[0]);
	for (size_t i = 1; i < 8; i++) {
		z[8 + i] = mulUnitAddT<8>(&z[i], x, y[i]);
	}
}
extern "C" void mclb_mul_slow9(Unit *z, const Unit *x, const Unit *y)
{
	z[9] = mulUnitT<9>(z, x, y[0]);
	for (size_t i = 1; i < 9; i++) {
		z[9 + i] = mulUnitAddT<9>(&z[i], x, y[i]);
	}
}
#endif // MCL_BINT_ASM_X64 == 1
#if MCL_BINT_ASM_X64 == 1
extern "C" void mclb_sqr_slow1(Unit *y, const Unit *x)
{
	mclb_mul_slow1(y, x, x);
}
extern "C" void mclb_sqr_slow2(Unit *y, const Unit *x)
{
	mclb_mul_slow2(y, x, x);
}
extern "C" void mclb_sqr_slow3(Unit *y, const Unit *x)
{
	mclb_mul_slow3(y, x, x);
}
extern "C" void mclb_sqr_slow4(Unit *y, const Unit *x)
{
	mclb_mul_slow4(y, x, x);
}
extern "C" void mclb_sqr_slow5(Unit *y, const Unit *x)
{
	mclb_mul_slow5(y, x, x);
}
extern "C" void mclb_sqr_slow6(Unit *y, const Unit *x)
{
	mclb_mul_slow6(y, x, x);
}
extern "C" void mclb_sqr_slow7(Unit *y, const Unit *x)
{
	mclb_mul_slow7(y, x, x);
}
extern "C" void mclb_sqr_slow8(Unit *y, const Unit *x)
{
	mclb_mul_slow8(y, x, x);
}
extern "C" void mclb_sqr_slow9(Unit *y, const Unit *x)
{
	mclb_mul_slow9(y, x, x);
}
#endif // MCL_BINT_ASM_X64 == 1
