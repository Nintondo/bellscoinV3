// this code is generated by python3 src/gen_bint_header.py proto
#if MCL_BINT_ASM == 1
extern "C" MCL_DLL_API Unit mclb_add1(Unit *z, const Unit *x, const Unit *y);
template<> inline Unit addT<1>(Unit *z, const Unit *x, const Unit *y) { return mclb_add1(z, x, y); }
extern "C" MCL_DLL_API Unit mclb_sub1(Unit *z, const Unit *x, const Unit *y);
template<> inline Unit subT<1>(Unit *z, const Unit *x, const Unit *y) { return mclb_sub1(z, x, y); }
extern "C" MCL_DLL_API void mclb_addNF1(Unit *z, const Unit *x, const Unit *y);
template<> inline void addNFT<1>(Unit *z, const Unit *x, const Unit *y) { mclb_addNF1(z, x, y); }
extern "C" MCL_DLL_API Unit mclb_subNF1(Unit *z, const Unit *x, const Unit *y);
template<> inline Unit subNFT<1>(Unit *z, const Unit *x, const Unit *y) { return mclb_subNF1(z, x, y); }
extern "C" MCL_DLL_API Unit mclb_add2(Unit *z, const Unit *x, const Unit *y);
template<> inline Unit addT<2>(Unit *z, const Unit *x, const Unit *y) { return mclb_add2(z, x, y); }
extern "C" MCL_DLL_API Unit mclb_sub2(Unit *z, const Unit *x, const Unit *y);
template<> inline Unit subT<2>(Unit *z, const Unit *x, const Unit *y) { return mclb_sub2(z, x, y); }
extern "C" MCL_DLL_API void mclb_addNF2(Unit *z, const Unit *x, const Unit *y);
template<> inline void addNFT<2>(Unit *z, const Unit *x, const Unit *y) { mclb_addNF2(z, x, y); }
extern "C" MCL_DLL_API Unit mclb_subNF2(Unit *z, const Unit *x, const Unit *y);
template<> inline Unit subNFT<2>(Unit *z, const Unit *x, const Unit *y) { return mclb_subNF2(z, x, y); }
extern "C" MCL_DLL_API Unit mclb_add3(Unit *z, const Unit *x, const Unit *y);
template<> inline Unit addT<3>(Unit *z, const Unit *x, const Unit *y) { return mclb_add3(z, x, y); }
extern "C" MCL_DLL_API Unit mclb_sub3(Unit *z, const Unit *x, const Unit *y);
template<> inline Unit subT<3>(Unit *z, const Unit *x, const Unit *y) { return mclb_sub3(z, x, y); }
extern "C" MCL_DLL_API void mclb_addNF3(Unit *z, const Unit *x, const Unit *y);
template<> inline void addNFT<3>(Unit *z, const Unit *x, const Unit *y) { mclb_addNF3(z, x, y); }
extern "C" MCL_DLL_API Unit mclb_subNF3(Unit *z, const Unit *x, const Unit *y);
template<> inline Unit subNFT<3>(Unit *z, const Unit *x, const Unit *y) { return mclb_subNF3(z, x, y); }
extern "C" MCL_DLL_API Unit mclb_add4(Unit *z, const Unit *x, const Unit *y);
template<> inline Unit addT<4>(Unit *z, const Unit *x, const Unit *y) { return mclb_add4(z, x, y); }
extern "C" MCL_DLL_API Unit mclb_sub4(Unit *z, const Unit *x, const Unit *y);
template<> inline Unit subT<4>(Unit *z, const Unit *x, const Unit *y) { return mclb_sub4(z, x, y); }
extern "C" MCL_DLL_API void mclb_addNF4(Unit *z, const Unit *x, const Unit *y);
template<> inline void addNFT<4>(Unit *z, const Unit *x, const Unit *y) { mclb_addNF4(z, x, y); }
extern "C" MCL_DLL_API Unit mclb_subNF4(Unit *z, const Unit *x, const Unit *y);
template<> inline Unit subNFT<4>(Unit *z, const Unit *x, const Unit *y) { return mclb_subNF4(z, x, y); }
extern "C" MCL_DLL_API Unit mclb_add5(Unit *z, const Unit *x, const Unit *y);
template<> inline Unit addT<5>(Unit *z, const Unit *x, const Unit *y) { return mclb_add5(z, x, y); }
extern "C" MCL_DLL_API Unit mclb_sub5(Unit *z, const Unit *x, const Unit *y);
template<> inline Unit subT<5>(Unit *z, const Unit *x, const Unit *y) { return mclb_sub5(z, x, y); }
extern "C" MCL_DLL_API void mclb_addNF5(Unit *z, const Unit *x, const Unit *y);
template<> inline void addNFT<5>(Unit *z, const Unit *x, const Unit *y) { mclb_addNF5(z, x, y); }
extern "C" MCL_DLL_API Unit mclb_subNF5(Unit *z, const Unit *x, const Unit *y);
template<> inline Unit subNFT<5>(Unit *z, const Unit *x, const Unit *y) { return mclb_subNF5(z, x, y); }
extern "C" MCL_DLL_API Unit mclb_add6(Unit *z, const Unit *x, const Unit *y);
template<> inline Unit addT<6>(Unit *z, const Unit *x, const Unit *y) { return mclb_add6(z, x, y); }
extern "C" MCL_DLL_API Unit mclb_sub6(Unit *z, const Unit *x, const Unit *y);
template<> inline Unit subT<6>(Unit *z, const Unit *x, const Unit *y) { return mclb_sub6(z, x, y); }
extern "C" MCL_DLL_API void mclb_addNF6(Unit *z, const Unit *x, const Unit *y);
template<> inline void addNFT<6>(Unit *z, const Unit *x, const Unit *y) { mclb_addNF6(z, x, y); }
extern "C" MCL_DLL_API Unit mclb_subNF6(Unit *z, const Unit *x, const Unit *y);
template<> inline Unit subNFT<6>(Unit *z, const Unit *x, const Unit *y) { return mclb_subNF6(z, x, y); }
extern "C" MCL_DLL_API Unit mclb_add7(Unit *z, const Unit *x, const Unit *y);
template<> inline Unit addT<7>(Unit *z, const Unit *x, const Unit *y) { return mclb_add7(z, x, y); }
extern "C" MCL_DLL_API Unit mclb_sub7(Unit *z, const Unit *x, const Unit *y);
template<> inline Unit subT<7>(Unit *z, const Unit *x, const Unit *y) { return mclb_sub7(z, x, y); }
extern "C" MCL_DLL_API void mclb_addNF7(Unit *z, const Unit *x, const Unit *y);
template<> inline void addNFT<7>(Unit *z, const Unit *x, const Unit *y) { mclb_addNF7(z, x, y); }
extern "C" MCL_DLL_API Unit mclb_subNF7(Unit *z, const Unit *x, const Unit *y);
template<> inline Unit subNFT<7>(Unit *z, const Unit *x, const Unit *y) { return mclb_subNF7(z, x, y); }
extern "C" MCL_DLL_API Unit mclb_add8(Unit *z, const Unit *x, const Unit *y);
template<> inline Unit addT<8>(Unit *z, const Unit *x, const Unit *y) { return mclb_add8(z, x, y); }
extern "C" MCL_DLL_API Unit mclb_sub8(Unit *z, const Unit *x, const Unit *y);
template<> inline Unit subT<8>(Unit *z, const Unit *x, const Unit *y) { return mclb_sub8(z, x, y); }
extern "C" MCL_DLL_API void mclb_addNF8(Unit *z, const Unit *x, const Unit *y);
template<> inline void addNFT<8>(Unit *z, const Unit *x, const Unit *y) { mclb_addNF8(z, x, y); }
extern "C" MCL_DLL_API Unit mclb_subNF8(Unit *z, const Unit *x, const Unit *y);
template<> inline Unit subNFT<8>(Unit *z, const Unit *x, const Unit *y) { return mclb_subNF8(z, x, y); }
extern "C" MCL_DLL_API Unit mclb_add9(Unit *z, const Unit *x, const Unit *y);
template<> inline Unit addT<9>(Unit *z, const Unit *x, const Unit *y) { return mclb_add9(z, x, y); }
extern "C" MCL_DLL_API Unit mclb_sub9(Unit *z, const Unit *x, const Unit *y);
template<> inline Unit subT<9>(Unit *z, const Unit *x, const Unit *y) { return mclb_sub9(z, x, y); }
extern "C" MCL_DLL_API void mclb_addNF9(Unit *z, const Unit *x, const Unit *y);
template<> inline void addNFT<9>(Unit *z, const Unit *x, const Unit *y) { mclb_addNF9(z, x, y); }
extern "C" MCL_DLL_API Unit mclb_subNF9(Unit *z, const Unit *x, const Unit *y);
template<> inline Unit subNFT<9>(Unit *z, const Unit *x, const Unit *y) { return mclb_subNF9(z, x, y); }
extern "C" MCL_DLL_API Unit mclb_add10(Unit *z, const Unit *x, const Unit *y);
template<> inline Unit addT<10>(Unit *z, const Unit *x, const Unit *y) { return mclb_add10(z, x, y); }
extern "C" MCL_DLL_API Unit mclb_sub10(Unit *z, const Unit *x, const Unit *y);
template<> inline Unit subT<10>(Unit *z, const Unit *x, const Unit *y) { return mclb_sub10(z, x, y); }
extern "C" MCL_DLL_API void mclb_addNF10(Unit *z, const Unit *x, const Unit *y);
template<> inline void addNFT<10>(Unit *z, const Unit *x, const Unit *y) { mclb_addNF10(z, x, y); }
extern "C" MCL_DLL_API Unit mclb_subNF10(Unit *z, const Unit *x, const Unit *y);
template<> inline Unit subNFT<10>(Unit *z, const Unit *x, const Unit *y) { return mclb_subNF10(z, x, y); }
extern "C" MCL_DLL_API Unit mclb_add11(Unit *z, const Unit *x, const Unit *y);
template<> inline Unit addT<11>(Unit *z, const Unit *x, const Unit *y) { return mclb_add11(z, x, y); }
extern "C" MCL_DLL_API Unit mclb_sub11(Unit *z, const Unit *x, const Unit *y);
template<> inline Unit subT<11>(Unit *z, const Unit *x, const Unit *y) { return mclb_sub11(z, x, y); }
extern "C" MCL_DLL_API void mclb_addNF11(Unit *z, const Unit *x, const Unit *y);
template<> inline void addNFT<11>(Unit *z, const Unit *x, const Unit *y) { mclb_addNF11(z, x, y); }
extern "C" MCL_DLL_API Unit mclb_subNF11(Unit *z, const Unit *x, const Unit *y);
template<> inline Unit subNFT<11>(Unit *z, const Unit *x, const Unit *y) { return mclb_subNF11(z, x, y); }
extern "C" MCL_DLL_API Unit mclb_add12(Unit *z, const Unit *x, const Unit *y);
template<> inline Unit addT<12>(Unit *z, const Unit *x, const Unit *y) { return mclb_add12(z, x, y); }
extern "C" MCL_DLL_API Unit mclb_sub12(Unit *z, const Unit *x, const Unit *y);
template<> inline Unit subT<12>(Unit *z, const Unit *x, const Unit *y) { return mclb_sub12(z, x, y); }
extern "C" MCL_DLL_API void mclb_addNF12(Unit *z, const Unit *x, const Unit *y);
template<> inline void addNFT<12>(Unit *z, const Unit *x, const Unit *y) { mclb_addNF12(z, x, y); }
extern "C" MCL_DLL_API Unit mclb_subNF12(Unit *z, const Unit *x, const Unit *y);
template<> inline Unit subNFT<12>(Unit *z, const Unit *x, const Unit *y) { return mclb_subNF12(z, x, y); }
extern "C" MCL_DLL_API Unit mclb_add13(Unit *z, const Unit *x, const Unit *y);
template<> inline Unit addT<13>(Unit *z, const Unit *x, const Unit *y) { return mclb_add13(z, x, y); }
extern "C" MCL_DLL_API Unit mclb_sub13(Unit *z, const Unit *x, const Unit *y);
template<> inline Unit subT<13>(Unit *z, const Unit *x, const Unit *y) { return mclb_sub13(z, x, y); }
extern "C" MCL_DLL_API void mclb_addNF13(Unit *z, const Unit *x, const Unit *y);
template<> inline void addNFT<13>(Unit *z, const Unit *x, const Unit *y) { mclb_addNF13(z, x, y); }
extern "C" MCL_DLL_API Unit mclb_subNF13(Unit *z, const Unit *x, const Unit *y);
template<> inline Unit subNFT<13>(Unit *z, const Unit *x, const Unit *y) { return mclb_subNF13(z, x, y); }
extern "C" MCL_DLL_API Unit mclb_add14(Unit *z, const Unit *x, const Unit *y);
template<> inline Unit addT<14>(Unit *z, const Unit *x, const Unit *y) { return mclb_add14(z, x, y); }
extern "C" MCL_DLL_API Unit mclb_sub14(Unit *z, const Unit *x, const Unit *y);
template<> inline Unit subT<14>(Unit *z, const Unit *x, const Unit *y) { return mclb_sub14(z, x, y); }
extern "C" MCL_DLL_API void mclb_addNF14(Unit *z, const Unit *x, const Unit *y);
template<> inline void addNFT<14>(Unit *z, const Unit *x, const Unit *y) { mclb_addNF14(z, x, y); }
extern "C" MCL_DLL_API Unit mclb_subNF14(Unit *z, const Unit *x, const Unit *y);
template<> inline Unit subNFT<14>(Unit *z, const Unit *x, const Unit *y) { return mclb_subNF14(z, x, y); }
extern "C" MCL_DLL_API Unit mclb_add15(Unit *z, const Unit *x, const Unit *y);
template<> inline Unit addT<15>(Unit *z, const Unit *x, const Unit *y) { return mclb_add15(z, x, y); }
extern "C" MCL_DLL_API Unit mclb_sub15(Unit *z, const Unit *x, const Unit *y);
template<> inline Unit subT<15>(Unit *z, const Unit *x, const Unit *y) { return mclb_sub15(z, x, y); }
extern "C" MCL_DLL_API void mclb_addNF15(Unit *z, const Unit *x, const Unit *y);
template<> inline void addNFT<15>(Unit *z, const Unit *x, const Unit *y) { mclb_addNF15(z, x, y); }
extern "C" MCL_DLL_API Unit mclb_subNF15(Unit *z, const Unit *x, const Unit *y);
template<> inline Unit subNFT<15>(Unit *z, const Unit *x, const Unit *y) { return mclb_subNF15(z, x, y); }
extern "C" MCL_DLL_API Unit mclb_add16(Unit *z, const Unit *x, const Unit *y);
template<> inline Unit addT<16>(Unit *z, const Unit *x, const Unit *y) { return mclb_add16(z, x, y); }
extern "C" MCL_DLL_API Unit mclb_sub16(Unit *z, const Unit *x, const Unit *y);
template<> inline Unit subT<16>(Unit *z, const Unit *x, const Unit *y) { return mclb_sub16(z, x, y); }
extern "C" MCL_DLL_API void mclb_addNF16(Unit *z, const Unit *x, const Unit *y);
template<> inline void addNFT<16>(Unit *z, const Unit *x, const Unit *y) { mclb_addNF16(z, x, y); }
extern "C" MCL_DLL_API Unit mclb_subNF16(Unit *z, const Unit *x, const Unit *y);
template<> inline Unit subNFT<16>(Unit *z, const Unit *x, const Unit *y) { return mclb_subNF16(z, x, y); }
#if MCL_SIZEOF_UNIT == 4
extern "C" MCL_DLL_API Unit mclb_add17(Unit *z, const Unit *x, const Unit *y);
template<> inline Unit addT<17>(Unit *z, const Unit *x, const Unit *y) { return mclb_add17(z, x, y); }
extern "C" MCL_DLL_API Unit mclb_sub17(Unit *z, const Unit *x, const Unit *y);
template<> inline Unit subT<17>(Unit *z, const Unit *x, const Unit *y) { return mclb_sub17(z, x, y); }
extern "C" MCL_DLL_API void mclb_addNF17(Unit *z, const Unit *x, const Unit *y);
template<> inline void addNFT<17>(Unit *z, const Unit *x, const Unit *y) { mclb_addNF17(z, x, y); }
extern "C" MCL_DLL_API Unit mclb_subNF17(Unit *z, const Unit *x, const Unit *y);
template<> inline Unit subNFT<17>(Unit *z, const Unit *x, const Unit *y) { return mclb_subNF17(z, x, y); }
extern "C" MCL_DLL_API Unit mclb_add18(Unit *z, const Unit *x, const Unit *y);
template<> inline Unit addT<18>(Unit *z, const Unit *x, const Unit *y) { return mclb_add18(z, x, y); }
extern "C" MCL_DLL_API Unit mclb_sub18(Unit *z, const Unit *x, const Unit *y);
template<> inline Unit subT<18>(Unit *z, const Unit *x, const Unit *y) { return mclb_sub18(z, x, y); }
extern "C" MCL_DLL_API void mclb_addNF18(Unit *z, const Unit *x, const Unit *y);
template<> inline void addNFT<18>(Unit *z, const Unit *x, const Unit *y) { mclb_addNF18(z, x, y); }
extern "C" MCL_DLL_API Unit mclb_subNF18(Unit *z, const Unit *x, const Unit *y);
template<> inline Unit subNFT<18>(Unit *z, const Unit *x, const Unit *y) { return mclb_subNF18(z, x, y); }
extern "C" MCL_DLL_API Unit mclb_add19(Unit *z, const Unit *x, const Unit *y);
template<> inline Unit addT<19>(Unit *z, const Unit *x, const Unit *y) { return mclb_add19(z, x, y); }
extern "C" MCL_DLL_API Unit mclb_sub19(Unit *z, const Unit *x, const Unit *y);
template<> inline Unit subT<19>(Unit *z, const Unit *x, const Unit *y) { return mclb_sub19(z, x, y); }
extern "C" MCL_DLL_API void mclb_addNF19(Unit *z, const Unit *x, const Unit *y);
template<> inline void addNFT<19>(Unit *z, const Unit *x, const Unit *y) { mclb_addNF19(z, x, y); }
extern "C" MCL_DLL_API Unit mclb_subNF19(Unit *z, const Unit *x, const Unit *y);
template<> inline Unit subNFT<19>(Unit *z, const Unit *x, const Unit *y) { return mclb_subNF19(z, x, y); }
extern "C" MCL_DLL_API Unit mclb_add20(Unit *z, const Unit *x, const Unit *y);
template<> inline Unit addT<20>(Unit *z, const Unit *x, const Unit *y) { return mclb_add20(z, x, y); }
extern "C" MCL_DLL_API Unit mclb_sub20(Unit *z, const Unit *x, const Unit *y);
template<> inline Unit subT<20>(Unit *z, const Unit *x, const Unit *y) { return mclb_sub20(z, x, y); }
extern "C" MCL_DLL_API void mclb_addNF20(Unit *z, const Unit *x, const Unit *y);
template<> inline void addNFT<20>(Unit *z, const Unit *x, const Unit *y) { mclb_addNF20(z, x, y); }
extern "C" MCL_DLL_API Unit mclb_subNF20(Unit *z, const Unit *x, const Unit *y);
template<> inline Unit subNFT<20>(Unit *z, const Unit *x, const Unit *y) { return mclb_subNF20(z, x, y); }
extern "C" MCL_DLL_API Unit mclb_add21(Unit *z, const Unit *x, const Unit *y);
template<> inline Unit addT<21>(Unit *z, const Unit *x, const Unit *y) { return mclb_add21(z, x, y); }
extern "C" MCL_DLL_API Unit mclb_sub21(Unit *z, const Unit *x, const Unit *y);
template<> inline Unit subT<21>(Unit *z, const Unit *x, const Unit *y) { return mclb_sub21(z, x, y); }
extern "C" MCL_DLL_API void mclb_addNF21(Unit *z, const Unit *x, const Unit *y);
template<> inline void addNFT<21>(Unit *z, const Unit *x, const Unit *y) { mclb_addNF21(z, x, y); }
extern "C" MCL_DLL_API Unit mclb_subNF21(Unit *z, const Unit *x, const Unit *y);
template<> inline Unit subNFT<21>(Unit *z, const Unit *x, const Unit *y) { return mclb_subNF21(z, x, y); }
extern "C" MCL_DLL_API Unit mclb_add22(Unit *z, const Unit *x, const Unit *y);
template<> inline Unit addT<22>(Unit *z, const Unit *x, const Unit *y) { return mclb_add22(z, x, y); }
extern "C" MCL_DLL_API Unit mclb_sub22(Unit *z, const Unit *x, const Unit *y);
template<> inline Unit subT<22>(Unit *z, const Unit *x, const Unit *y) { return mclb_sub22(z, x, y); }
extern "C" MCL_DLL_API void mclb_addNF22(Unit *z, const Unit *x, const Unit *y);
template<> inline void addNFT<22>(Unit *z, const Unit *x, const Unit *y) { mclb_addNF22(z, x, y); }
extern "C" MCL_DLL_API Unit mclb_subNF22(Unit *z, const Unit *x, const Unit *y);
template<> inline Unit subNFT<22>(Unit *z, const Unit *x, const Unit *y) { return mclb_subNF22(z, x, y); }
extern "C" MCL_DLL_API Unit mclb_add23(Unit *z, const Unit *x, const Unit *y);
template<> inline Unit addT<23>(Unit *z, const Unit *x, const Unit *y) { return mclb_add23(z, x, y); }
extern "C" MCL_DLL_API Unit mclb_sub23(Unit *z, const Unit *x, const Unit *y);
template<> inline Unit subT<23>(Unit *z, const Unit *x, const Unit *y) { return mclb_sub23(z, x, y); }
extern "C" MCL_DLL_API void mclb_addNF23(Unit *z, const Unit *x, const Unit *y);
template<> inline void addNFT<23>(Unit *z, const Unit *x, const Unit *y) { mclb_addNF23(z, x, y); }
extern "C" MCL_DLL_API Unit mclb_subNF23(Unit *z, const Unit *x, const Unit *y);
template<> inline Unit subNFT<23>(Unit *z, const Unit *x, const Unit *y) { return mclb_subNF23(z, x, y); }
extern "C" MCL_DLL_API Unit mclb_add24(Unit *z, const Unit *x, const Unit *y);
template<> inline Unit addT<24>(Unit *z, const Unit *x, const Unit *y) { return mclb_add24(z, x, y); }
extern "C" MCL_DLL_API Unit mclb_sub24(Unit *z, const Unit *x, const Unit *y);
template<> inline Unit subT<24>(Unit *z, const Unit *x, const Unit *y) { return mclb_sub24(z, x, y); }
extern "C" MCL_DLL_API void mclb_addNF24(Unit *z, const Unit *x, const Unit *y);
template<> inline void addNFT<24>(Unit *z, const Unit *x, const Unit *y) { mclb_addNF24(z, x, y); }
extern "C" MCL_DLL_API Unit mclb_subNF24(Unit *z, const Unit *x, const Unit *y);
template<> inline Unit subNFT<24>(Unit *z, const Unit *x, const Unit *y) { return mclb_subNF24(z, x, y); }
extern "C" MCL_DLL_API Unit mclb_add25(Unit *z, const Unit *x, const Unit *y);
template<> inline Unit addT<25>(Unit *z, const Unit *x, const Unit *y) { return mclb_add25(z, x, y); }
extern "C" MCL_DLL_API Unit mclb_sub25(Unit *z, const Unit *x, const Unit *y);
template<> inline Unit subT<25>(Unit *z, const Unit *x, const Unit *y) { return mclb_sub25(z, x, y); }
extern "C" MCL_DLL_API void mclb_addNF25(Unit *z, const Unit *x, const Unit *y);
template<> inline void addNFT<25>(Unit *z, const Unit *x, const Unit *y) { mclb_addNF25(z, x, y); }
extern "C" MCL_DLL_API Unit mclb_subNF25(Unit *z, const Unit *x, const Unit *y);
template<> inline Unit subNFT<25>(Unit *z, const Unit *x, const Unit *y) { return mclb_subNF25(z, x, y); }
extern "C" MCL_DLL_API Unit mclb_add26(Unit *z, const Unit *x, const Unit *y);
template<> inline Unit addT<26>(Unit *z, const Unit *x, const Unit *y) { return mclb_add26(z, x, y); }
extern "C" MCL_DLL_API Unit mclb_sub26(Unit *z, const Unit *x, const Unit *y);
template<> inline Unit subT<26>(Unit *z, const Unit *x, const Unit *y) { return mclb_sub26(z, x, y); }
extern "C" MCL_DLL_API void mclb_addNF26(Unit *z, const Unit *x, const Unit *y);
template<> inline void addNFT<26>(Unit *z, const Unit *x, const Unit *y) { mclb_addNF26(z, x, y); }
extern "C" MCL_DLL_API Unit mclb_subNF26(Unit *z, const Unit *x, const Unit *y);
template<> inline Unit subNFT<26>(Unit *z, const Unit *x, const Unit *y) { return mclb_subNF26(z, x, y); }
extern "C" MCL_DLL_API Unit mclb_add27(Unit *z, const Unit *x, const Unit *y);
template<> inline Unit addT<27>(Unit *z, const Unit *x, const Unit *y) { return mclb_add27(z, x, y); }
extern "C" MCL_DLL_API Unit mclb_sub27(Unit *z, const Unit *x, const Unit *y);
template<> inline Unit subT<27>(Unit *z, const Unit *x, const Unit *y) { return mclb_sub27(z, x, y); }
extern "C" MCL_DLL_API void mclb_addNF27(Unit *z, const Unit *x, const Unit *y);
template<> inline void addNFT<27>(Unit *z, const Unit *x, const Unit *y) { mclb_addNF27(z, x, y); }
extern "C" MCL_DLL_API Unit mclb_subNF27(Unit *z, const Unit *x, const Unit *y);
template<> inline Unit subNFT<27>(Unit *z, const Unit *x, const Unit *y) { return mclb_subNF27(z, x, y); }
extern "C" MCL_DLL_API Unit mclb_add28(Unit *z, const Unit *x, const Unit *y);
template<> inline Unit addT<28>(Unit *z, const Unit *x, const Unit *y) { return mclb_add28(z, x, y); }
extern "C" MCL_DLL_API Unit mclb_sub28(Unit *z, const Unit *x, const Unit *y);
template<> inline Unit subT<28>(Unit *z, const Unit *x, const Unit *y) { return mclb_sub28(z, x, y); }
extern "C" MCL_DLL_API void mclb_addNF28(Unit *z, const Unit *x, const Unit *y);
template<> inline void addNFT<28>(Unit *z, const Unit *x, const Unit *y) { mclb_addNF28(z, x, y); }
extern "C" MCL_DLL_API Unit mclb_subNF28(Unit *z, const Unit *x, const Unit *y);
template<> inline Unit subNFT<28>(Unit *z, const Unit *x, const Unit *y) { return mclb_subNF28(z, x, y); }
extern "C" MCL_DLL_API Unit mclb_add29(Unit *z, const Unit *x, const Unit *y);
template<> inline Unit addT<29>(Unit *z, const Unit *x, const Unit *y) { return mclb_add29(z, x, y); }
extern "C" MCL_DLL_API Unit mclb_sub29(Unit *z, const Unit *x, const Unit *y);
template<> inline Unit subT<29>(Unit *z, const Unit *x, const Unit *y) { return mclb_sub29(z, x, y); }
extern "C" MCL_DLL_API void mclb_addNF29(Unit *z, const Unit *x, const Unit *y);
template<> inline void addNFT<29>(Unit *z, const Unit *x, const Unit *y) { mclb_addNF29(z, x, y); }
extern "C" MCL_DLL_API Unit mclb_subNF29(Unit *z, const Unit *x, const Unit *y);
template<> inline Unit subNFT<29>(Unit *z, const Unit *x, const Unit *y) { return mclb_subNF29(z, x, y); }
extern "C" MCL_DLL_API Unit mclb_add30(Unit *z, const Unit *x, const Unit *y);
template<> inline Unit addT<30>(Unit *z, const Unit *x, const Unit *y) { return mclb_add30(z, x, y); }
extern "C" MCL_DLL_API Unit mclb_sub30(Unit *z, const Unit *x, const Unit *y);
template<> inline Unit subT<30>(Unit *z, const Unit *x, const Unit *y) { return mclb_sub30(z, x, y); }
extern "C" MCL_DLL_API void mclb_addNF30(Unit *z, const Unit *x, const Unit *y);
template<> inline void addNFT<30>(Unit *z, const Unit *x, const Unit *y) { mclb_addNF30(z, x, y); }
extern "C" MCL_DLL_API Unit mclb_subNF30(Unit *z, const Unit *x, const Unit *y);
template<> inline Unit subNFT<30>(Unit *z, const Unit *x, const Unit *y) { return mclb_subNF30(z, x, y); }
extern "C" MCL_DLL_API Unit mclb_add31(Unit *z, const Unit *x, const Unit *y);
template<> inline Unit addT<31>(Unit *z, const Unit *x, const Unit *y) { return mclb_add31(z, x, y); }
extern "C" MCL_DLL_API Unit mclb_sub31(Unit *z, const Unit *x, const Unit *y);
template<> inline Unit subT<31>(Unit *z, const Unit *x, const Unit *y) { return mclb_sub31(z, x, y); }
extern "C" MCL_DLL_API void mclb_addNF31(Unit *z, const Unit *x, const Unit *y);
template<> inline void addNFT<31>(Unit *z, const Unit *x, const Unit *y) { mclb_addNF31(z, x, y); }
extern "C" MCL_DLL_API Unit mclb_subNF31(Unit *z, const Unit *x, const Unit *y);
template<> inline Unit subNFT<31>(Unit *z, const Unit *x, const Unit *y) { return mclb_subNF31(z, x, y); }
extern "C" MCL_DLL_API Unit mclb_add32(Unit *z, const Unit *x, const Unit *y);
template<> inline Unit addT<32>(Unit *z, const Unit *x, const Unit *y) { return mclb_add32(z, x, y); }
extern "C" MCL_DLL_API Unit mclb_sub32(Unit *z, const Unit *x, const Unit *y);
template<> inline Unit subT<32>(Unit *z, const Unit *x, const Unit *y) { return mclb_sub32(z, x, y); }
extern "C" MCL_DLL_API void mclb_addNF32(Unit *z, const Unit *x, const Unit *y);
template<> inline void addNFT<32>(Unit *z, const Unit *x, const Unit *y) { mclb_addNF32(z, x, y); }
extern "C" MCL_DLL_API Unit mclb_subNF32(Unit *z, const Unit *x, const Unit *y);
template<> inline Unit subNFT<32>(Unit *z, const Unit *x, const Unit *y) { return mclb_subNF32(z, x, y); }
#endif // #if MCL_SIZEOF_UNIT == 4
#if MCL_BINT_ASM_X64 == 1
extern "C" MCL_DLL_API u_ppu mclb_mulUnit1;
extern "C" Unit mclb_mulUnit_slow1(Unit *z, const Unit *x, Unit y);
extern "C" Unit mclb_mulUnit_fast1(Unit *z, const Unit *x, Unit y);
#else
extern "C" MCL_DLL_API Unit mclb_mulUnit1(Unit *z, const Unit *x, Unit y);
#endif
template<> inline Unit mulUnitT<1>(Unit *z, const Unit *x, Unit y) { return mclb_mulUnit1(z, x, y); }
#if MCL_BINT_ASM_X64 == 1
extern "C" MCL_DLL_API u_ppu mclb_mulUnitAdd1;
extern "C" Unit mclb_mulUnitAdd_slow1(Unit *z, const Unit *x, Unit y);
extern "C" Unit mclb_mulUnitAdd_fast1(Unit *z, const Unit *x, Unit y);
#else
extern "C" MCL_DLL_API Unit mclb_mulUnitAdd1(Unit *z, const Unit *x, Unit y);
#endif
template<> inline Unit mulUnitAddT<1>(Unit *z, const Unit *x, Unit y) { return mclb_mulUnitAdd1(z, x, y); }
#if MCL_BINT_ASM_X64 == 1
extern "C" MCL_DLL_API void_ppp mclb_mul1;
extern "C" void mclb_mul_slow1(Unit *z, const Unit *x, const Unit *y);
extern "C" void mclb_mul_fast1(Unit *z, const Unit *x, const Unit *y);
#else
extern "C" MCL_DLL_API void mclb_mul1(Unit *z, const Unit *x, const Unit *y);
#endif
template<> inline void mulT<1>(Unit *z, const Unit *x, const Unit *y) { mclb_mul1(z, x, y); }
#if MCL_BINT_ASM_X64 == 1
extern "C" MCL_DLL_API void_pp mclb_sqr1;
extern "C" void mclb_sqr_slow1(Unit *y, const Unit *x);
extern "C" void mclb_sqr_fast1(Unit *y, const Unit *x);
#else
extern "C" MCL_DLL_API void mclb_sqr1(Unit *y, const Unit *x);
#endif
template<> inline void sqrT<1>(Unit *y, const Unit *x) { mclb_sqr1(y, x); }
#if MCL_BINT_ASM_X64 == 1
extern "C" MCL_DLL_API u_ppu mclb_mulUnit2;
extern "C" Unit mclb_mulUnit_slow2(Unit *z, const Unit *x, Unit y);
extern "C" Unit mclb_mulUnit_fast2(Unit *z, const Unit *x, Unit y);
#else
extern "C" MCL_DLL_API Unit mclb_mulUnit2(Unit *z, const Unit *x, Unit y);
#endif
template<> inline Unit mulUnitT<2>(Unit *z, const Unit *x, Unit y) { return mclb_mulUnit2(z, x, y); }
#if MCL_BINT_ASM_X64 == 1
extern "C" MCL_DLL_API u_ppu mclb_mulUnitAdd2;
extern "C" Unit mclb_mulUnitAdd_slow2(Unit *z, const Unit *x, Unit y);
extern "C" Unit mclb_mulUnitAdd_fast2(Unit *z, const Unit *x, Unit y);
#else
extern "C" MCL_DLL_API Unit mclb_mulUnitAdd2(Unit *z, const Unit *x, Unit y);
#endif
template<> inline Unit mulUnitAddT<2>(Unit *z, const Unit *x, Unit y) { return mclb_mulUnitAdd2(z, x, y); }
#if MCL_BINT_ASM_X64 == 1
extern "C" MCL_DLL_API void_ppp mclb_mul2;
extern "C" void mclb_mul_slow2(Unit *z, const Unit *x, const Unit *y);
extern "C" void mclb_mul_fast2(Unit *z, const Unit *x, const Unit *y);
#else
extern "C" MCL_DLL_API void mclb_mul2(Unit *z, const Unit *x, const Unit *y);
#endif
template<> inline void mulT<2>(Unit *z, const Unit *x, const Unit *y) { mclb_mul2(z, x, y); }
#if MCL_BINT_ASM_X64 == 1
extern "C" MCL_DLL_API void_pp mclb_sqr2;
extern "C" void mclb_sqr_slow2(Unit *y, const Unit *x);
extern "C" void mclb_sqr_fast2(Unit *y, const Unit *x);
#else
extern "C" MCL_DLL_API void mclb_sqr2(Unit *y, const Unit *x);
#endif
template<> inline void sqrT<2>(Unit *y, const Unit *x) { mclb_sqr2(y, x); }
#if MCL_BINT_ASM_X64 == 1
extern "C" MCL_DLL_API u_ppu mclb_mulUnit3;
extern "C" Unit mclb_mulUnit_slow3(Unit *z, const Unit *x, Unit y);
extern "C" Unit mclb_mulUnit_fast3(Unit *z, const Unit *x, Unit y);
#else
extern "C" MCL_DLL_API Unit mclb_mulUnit3(Unit *z, const Unit *x, Unit y);
#endif
template<> inline Unit mulUnitT<3>(Unit *z, const Unit *x, Unit y) { return mclb_mulUnit3(z, x, y); }
#if MCL_BINT_ASM_X64 == 1
extern "C" MCL_DLL_API u_ppu mclb_mulUnitAdd3;
extern "C" Unit mclb_mulUnitAdd_slow3(Unit *z, const Unit *x, Unit y);
extern "C" Unit mclb_mulUnitAdd_fast3(Unit *z, const Unit *x, Unit y);
#else
extern "C" MCL_DLL_API Unit mclb_mulUnitAdd3(Unit *z, const Unit *x, Unit y);
#endif
template<> inline Unit mulUnitAddT<3>(Unit *z, const Unit *x, Unit y) { return mclb_mulUnitAdd3(z, x, y); }
#if MCL_BINT_ASM_X64 == 1
extern "C" MCL_DLL_API void_ppp mclb_mul3;
extern "C" void mclb_mul_slow3(Unit *z, const Unit *x, const Unit *y);
extern "C" void mclb_mul_fast3(Unit *z, const Unit *x, const Unit *y);
#else
extern "C" MCL_DLL_API void mclb_mul3(Unit *z, const Unit *x, const Unit *y);
#endif
template<> inline void mulT<3>(Unit *z, const Unit *x, const Unit *y) { mclb_mul3(z, x, y); }
#if MCL_BINT_ASM_X64 == 1
extern "C" MCL_DLL_API void_pp mclb_sqr3;
extern "C" void mclb_sqr_slow3(Unit *y, const Unit *x);
extern "C" void mclb_sqr_fast3(Unit *y, const Unit *x);
#else
extern "C" MCL_DLL_API void mclb_sqr3(Unit *y, const Unit *x);
#endif
template<> inline void sqrT<3>(Unit *y, const Unit *x) { mclb_sqr3(y, x); }
#if MCL_BINT_ASM_X64 == 1
extern "C" MCL_DLL_API u_ppu mclb_mulUnit4;
extern "C" Unit mclb_mulUnit_slow4(Unit *z, const Unit *x, Unit y);
extern "C" Unit mclb_mulUnit_fast4(Unit *z, const Unit *x, Unit y);
#else
extern "C" MCL_DLL_API Unit mclb_mulUnit4(Unit *z, const Unit *x, Unit y);
#endif
template<> inline Unit mulUnitT<4>(Unit *z, const Unit *x, Unit y) { return mclb_mulUnit4(z, x, y); }
#if MCL_BINT_ASM_X64 == 1
extern "C" MCL_DLL_API u_ppu mclb_mulUnitAdd4;
extern "C" Unit mclb_mulUnitAdd_slow4(Unit *z, const Unit *x, Unit y);
extern "C" Unit mclb_mulUnitAdd_fast4(Unit *z, const Unit *x, Unit y);
#else
extern "C" MCL_DLL_API Unit mclb_mulUnitAdd4(Unit *z, const Unit *x, Unit y);
#endif
template<> inline Unit mulUnitAddT<4>(Unit *z, const Unit *x, Unit y) { return mclb_mulUnitAdd4(z, x, y); }
#if MCL_BINT_ASM_X64 == 1
extern "C" MCL_DLL_API void_ppp mclb_mul4;
extern "C" void mclb_mul_slow4(Unit *z, const Unit *x, const Unit *y);
extern "C" void mclb_mul_fast4(Unit *z, const Unit *x, const Unit *y);
#else
extern "C" MCL_DLL_API void mclb_mul4(Unit *z, const Unit *x, const Unit *y);
#endif
template<> inline void mulT<4>(Unit *z, const Unit *x, const Unit *y) { mclb_mul4(z, x, y); }
#if MCL_BINT_ASM_X64 == 1
extern "C" MCL_DLL_API void_pp mclb_sqr4;
extern "C" void mclb_sqr_slow4(Unit *y, const Unit *x);
extern "C" void mclb_sqr_fast4(Unit *y, const Unit *x);
#else
extern "C" MCL_DLL_API void mclb_sqr4(Unit *y, const Unit *x);
#endif
template<> inline void sqrT<4>(Unit *y, const Unit *x) { mclb_sqr4(y, x); }
#if MCL_BINT_ASM_X64 == 1
extern "C" MCL_DLL_API u_ppu mclb_mulUnit5;
extern "C" Unit mclb_mulUnit_slow5(Unit *z, const Unit *x, Unit y);
extern "C" Unit mclb_mulUnit_fast5(Unit *z, const Unit *x, Unit y);
#else
extern "C" MCL_DLL_API Unit mclb_mulUnit5(Unit *z, const Unit *x, Unit y);
#endif
template<> inline Unit mulUnitT<5>(Unit *z, const Unit *x, Unit y) { return mclb_mulUnit5(z, x, y); }
#if MCL_BINT_ASM_X64 == 1
extern "C" MCL_DLL_API u_ppu mclb_mulUnitAdd5;
extern "C" Unit mclb_mulUnitAdd_slow5(Unit *z, const Unit *x, Unit y);
extern "C" Unit mclb_mulUnitAdd_fast5(Unit *z, const Unit *x, Unit y);
#else
extern "C" MCL_DLL_API Unit mclb_mulUnitAdd5(Unit *z, const Unit *x, Unit y);
#endif
template<> inline Unit mulUnitAddT<5>(Unit *z, const Unit *x, Unit y) { return mclb_mulUnitAdd5(z, x, y); }
#if MCL_BINT_ASM_X64 == 1
extern "C" MCL_DLL_API void_ppp mclb_mul5;
extern "C" void mclb_mul_slow5(Unit *z, const Unit *x, const Unit *y);
extern "C" void mclb_mul_fast5(Unit *z, const Unit *x, const Unit *y);
#else
extern "C" MCL_DLL_API void mclb_mul5(Unit *z, const Unit *x, const Unit *y);
#endif
template<> inline void mulT<5>(Unit *z, const Unit *x, const Unit *y) { mclb_mul5(z, x, y); }
#if MCL_BINT_ASM_X64 == 1
extern "C" MCL_DLL_API void_pp mclb_sqr5;
extern "C" void mclb_sqr_slow5(Unit *y, const Unit *x);
extern "C" void mclb_sqr_fast5(Unit *y, const Unit *x);
#else
extern "C" MCL_DLL_API void mclb_sqr5(Unit *y, const Unit *x);
#endif
template<> inline void sqrT<5>(Unit *y, const Unit *x) { mclb_sqr5(y, x); }
#if MCL_BINT_ASM_X64 == 1
extern "C" MCL_DLL_API u_ppu mclb_mulUnit6;
extern "C" Unit mclb_mulUnit_slow6(Unit *z, const Unit *x, Unit y);
extern "C" Unit mclb_mulUnit_fast6(Unit *z, const Unit *x, Unit y);
#else
extern "C" MCL_DLL_API Unit mclb_mulUnit6(Unit *z, const Unit *x, Unit y);
#endif
template<> inline Unit mulUnitT<6>(Unit *z, const Unit *x, Unit y) { return mclb_mulUnit6(z, x, y); }
#if MCL_BINT_ASM_X64 == 1
extern "C" MCL_DLL_API u_ppu mclb_mulUnitAdd6;
extern "C" Unit mclb_mulUnitAdd_slow6(Unit *z, const Unit *x, Unit y);
extern "C" Unit mclb_mulUnitAdd_fast6(Unit *z, const Unit *x, Unit y);
#else
extern "C" MCL_DLL_API Unit mclb_mulUnitAdd6(Unit *z, const Unit *x, Unit y);
#endif
template<> inline Unit mulUnitAddT<6>(Unit *z, const Unit *x, Unit y) { return mclb_mulUnitAdd6(z, x, y); }
#if MCL_BINT_ASM_X64 == 1
extern "C" MCL_DLL_API void_ppp mclb_mul6;
extern "C" void mclb_mul_slow6(Unit *z, const Unit *x, const Unit *y);
extern "C" void mclb_mul_fast6(Unit *z, const Unit *x, const Unit *y);
#else
extern "C" MCL_DLL_API void mclb_mul6(Unit *z, const Unit *x, const Unit *y);
#endif
template<> inline void mulT<6>(Unit *z, const Unit *x, const Unit *y) { mclb_mul6(z, x, y); }
#if MCL_BINT_ASM_X64 == 1
extern "C" MCL_DLL_API void_pp mclb_sqr6;
extern "C" void mclb_sqr_slow6(Unit *y, const Unit *x);
extern "C" void mclb_sqr_fast6(Unit *y, const Unit *x);
#else
extern "C" MCL_DLL_API void mclb_sqr6(Unit *y, const Unit *x);
#endif
template<> inline void sqrT<6>(Unit *y, const Unit *x) { mclb_sqr6(y, x); }
#if MCL_BINT_ASM_X64 == 1
extern "C" MCL_DLL_API u_ppu mclb_mulUnit7;
extern "C" Unit mclb_mulUnit_slow7(Unit *z, const Unit *x, Unit y);
extern "C" Unit mclb_mulUnit_fast7(Unit *z, const Unit *x, Unit y);
#else
extern "C" MCL_DLL_API Unit mclb_mulUnit7(Unit *z, const Unit *x, Unit y);
#endif
template<> inline Unit mulUnitT<7>(Unit *z, const Unit *x, Unit y) { return mclb_mulUnit7(z, x, y); }
#if MCL_BINT_ASM_X64 == 1
extern "C" MCL_DLL_API u_ppu mclb_mulUnitAdd7;
extern "C" Unit mclb_mulUnitAdd_slow7(Unit *z, const Unit *x, Unit y);
extern "C" Unit mclb_mulUnitAdd_fast7(Unit *z, const Unit *x, Unit y);
#else
extern "C" MCL_DLL_API Unit mclb_mulUnitAdd7(Unit *z, const Unit *x, Unit y);
#endif
template<> inline Unit mulUnitAddT<7>(Unit *z, const Unit *x, Unit y) { return mclb_mulUnitAdd7(z, x, y); }
#if MCL_BINT_ASM_X64 == 1
extern "C" MCL_DLL_API void_ppp mclb_mul7;
extern "C" void mclb_mul_slow7(Unit *z, const Unit *x, const Unit *y);
extern "C" void mclb_mul_fast7(Unit *z, const Unit *x, const Unit *y);
#else
extern "C" MCL_DLL_API void mclb_mul7(Unit *z, const Unit *x, const Unit *y);
#endif
template<> inline void mulT<7>(Unit *z, const Unit *x, const Unit *y) { mclb_mul7(z, x, y); }
#if MCL_BINT_ASM_X64 == 1
extern "C" MCL_DLL_API void_pp mclb_sqr7;
extern "C" void mclb_sqr_slow7(Unit *y, const Unit *x);
extern "C" void mclb_sqr_fast7(Unit *y, const Unit *x);
#else
extern "C" MCL_DLL_API void mclb_sqr7(Unit *y, const Unit *x);
#endif
template<> inline void sqrT<7>(Unit *y, const Unit *x) { mclb_sqr7(y, x); }
#if MCL_BINT_ASM_X64 == 1
extern "C" MCL_DLL_API u_ppu mclb_mulUnit8;
extern "C" Unit mclb_mulUnit_slow8(Unit *z, const Unit *x, Unit y);
extern "C" Unit mclb_mulUnit_fast8(Unit *z, const Unit *x, Unit y);
#else
extern "C" MCL_DLL_API Unit mclb_mulUnit8(Unit *z, const Unit *x, Unit y);
#endif
template<> inline Unit mulUnitT<8>(Unit *z, const Unit *x, Unit y) { return mclb_mulUnit8(z, x, y); }
#if MCL_BINT_ASM_X64 == 1
extern "C" MCL_DLL_API u_ppu mclb_mulUnitAdd8;
extern "C" Unit mclb_mulUnitAdd_slow8(Unit *z, const Unit *x, Unit y);
extern "C" Unit mclb_mulUnitAdd_fast8(Unit *z, const Unit *x, Unit y);
#else
extern "C" MCL_DLL_API Unit mclb_mulUnitAdd8(Unit *z, const Unit *x, Unit y);
#endif
template<> inline Unit mulUnitAddT<8>(Unit *z, const Unit *x, Unit y) { return mclb_mulUnitAdd8(z, x, y); }
#if MCL_BINT_ASM_X64 == 1
extern "C" MCL_DLL_API void_ppp mclb_mul8;
extern "C" void mclb_mul_slow8(Unit *z, const Unit *x, const Unit *y);
extern "C" void mclb_mul_fast8(Unit *z, const Unit *x, const Unit *y);
#else
extern "C" MCL_DLL_API void mclb_mul8(Unit *z, const Unit *x, const Unit *y);
#endif
template<> inline void mulT<8>(Unit *z, const Unit *x, const Unit *y) { mclb_mul8(z, x, y); }
#if MCL_BINT_ASM_X64 == 1
extern "C" MCL_DLL_API void_pp mclb_sqr8;
extern "C" void mclb_sqr_slow8(Unit *y, const Unit *x);
extern "C" void mclb_sqr_fast8(Unit *y, const Unit *x);
#else
extern "C" MCL_DLL_API void mclb_sqr8(Unit *y, const Unit *x);
#endif
template<> inline void sqrT<8>(Unit *y, const Unit *x) { mclb_sqr8(y, x); }
#if MCL_BINT_ASM_X64 == 1
extern "C" MCL_DLL_API u_ppu mclb_mulUnit9;
extern "C" Unit mclb_mulUnit_slow9(Unit *z, const Unit *x, Unit y);
extern "C" Unit mclb_mulUnit_fast9(Unit *z, const Unit *x, Unit y);
#else
extern "C" MCL_DLL_API Unit mclb_mulUnit9(Unit *z, const Unit *x, Unit y);
#endif
template<> inline Unit mulUnitT<9>(Unit *z, const Unit *x, Unit y) { return mclb_mulUnit9(z, x, y); }
#if MCL_BINT_ASM_X64 == 1
extern "C" MCL_DLL_API u_ppu mclb_mulUnitAdd9;
extern "C" Unit mclb_mulUnitAdd_slow9(Unit *z, const Unit *x, Unit y);
extern "C" Unit mclb_mulUnitAdd_fast9(Unit *z, const Unit *x, Unit y);
#else
extern "C" MCL_DLL_API Unit mclb_mulUnitAdd9(Unit *z, const Unit *x, Unit y);
#endif
template<> inline Unit mulUnitAddT<9>(Unit *z, const Unit *x, Unit y) { return mclb_mulUnitAdd9(z, x, y); }
#if MCL_BINT_ASM_X64 == 1
extern "C" MCL_DLL_API void_ppp mclb_mul9;
extern "C" void mclb_mul_slow9(Unit *z, const Unit *x, const Unit *y);
extern "C" void mclb_mul_fast9(Unit *z, const Unit *x, const Unit *y);
#else
extern "C" MCL_DLL_API void mclb_mul9(Unit *z, const Unit *x, const Unit *y);
#endif
template<> inline void mulT<9>(Unit *z, const Unit *x, const Unit *y) { mclb_mul9(z, x, y); }
#if MCL_BINT_ASM_X64 == 1
extern "C" MCL_DLL_API void_pp mclb_sqr9;
extern "C" void mclb_sqr_slow9(Unit *y, const Unit *x);
extern "C" void mclb_sqr_fast9(Unit *y, const Unit *x);
#else
extern "C" MCL_DLL_API void mclb_sqr9(Unit *y, const Unit *x);
#endif
template<> inline void sqrT<9>(Unit *y, const Unit *x) { mclb_sqr9(y, x); }
#if MCL_SIZEOF_UNIT == 4
#if MCL_BINT_ASM_X64 == 1
extern "C" MCL_DLL_API u_ppu mclb_mulUnit10;
extern "C" Unit mclb_mulUnit_slow10(Unit *z, const Unit *x, Unit y);
extern "C" Unit mclb_mulUnit_fast10(Unit *z, const Unit *x, Unit y);
#else
extern "C" MCL_DLL_API Unit mclb_mulUnit10(Unit *z, const Unit *x, Unit y);
#endif
template<> inline Unit mulUnitT<10>(Unit *z, const Unit *x, Unit y) { return mclb_mulUnit10(z, x, y); }
#if MCL_BINT_ASM_X64 == 1
extern "C" MCL_DLL_API u_ppu mclb_mulUnitAdd10;
extern "C" Unit mclb_mulUnitAdd_slow10(Unit *z, const Unit *x, Unit y);
extern "C" Unit mclb_mulUnitAdd_fast10(Unit *z, const Unit *x, Unit y);
#else
extern "C" MCL_DLL_API Unit mclb_mulUnitAdd10(Unit *z, const Unit *x, Unit y);
#endif
template<> inline Unit mulUnitAddT<10>(Unit *z, const Unit *x, Unit y) { return mclb_mulUnitAdd10(z, x, y); }
#if MCL_BINT_ASM_X64 == 1
extern "C" MCL_DLL_API void_ppp mclb_mul10;
extern "C" void mclb_mul_slow10(Unit *z, const Unit *x, const Unit *y);
extern "C" void mclb_mul_fast10(Unit *z, const Unit *x, const Unit *y);
#else
extern "C" MCL_DLL_API void mclb_mul10(Unit *z, const Unit *x, const Unit *y);
#endif
template<> inline void mulT<10>(Unit *z, const Unit *x, const Unit *y) { mclb_mul10(z, x, y); }
#if MCL_BINT_ASM_X64 == 1
extern "C" MCL_DLL_API void_pp mclb_sqr10;
extern "C" void mclb_sqr_slow10(Unit *y, const Unit *x);
extern "C" void mclb_sqr_fast10(Unit *y, const Unit *x);
#else
extern "C" MCL_DLL_API void mclb_sqr10(Unit *y, const Unit *x);
#endif
template<> inline void sqrT<10>(Unit *y, const Unit *x) { mclb_sqr10(y, x); }
#if MCL_BINT_ASM_X64 == 1
extern "C" MCL_DLL_API u_ppu mclb_mulUnit11;
extern "C" Unit mclb_mulUnit_slow11(Unit *z, const Unit *x, Unit y);
extern "C" Unit mclb_mulUnit_fast11(Unit *z, const Unit *x, Unit y);
#else
extern "C" MCL_DLL_API Unit mclb_mulUnit11(Unit *z, const Unit *x, Unit y);
#endif
template<> inline Unit mulUnitT<11>(Unit *z, const Unit *x, Unit y) { return mclb_mulUnit11(z, x, y); }
#if MCL_BINT_ASM_X64 == 1
extern "C" MCL_DLL_API u_ppu mclb_mulUnitAdd11;
extern "C" Unit mclb_mulUnitAdd_slow11(Unit *z, const Unit *x, Unit y);
extern "C" Unit mclb_mulUnitAdd_fast11(Unit *z, const Unit *x, Unit y);
#else
extern "C" MCL_DLL_API Unit mclb_mulUnitAdd11(Unit *z, const Unit *x, Unit y);
#endif
template<> inline Unit mulUnitAddT<11>(Unit *z, const Unit *x, Unit y) { return mclb_mulUnitAdd11(z, x, y); }
#if MCL_BINT_ASM_X64 == 1
extern "C" MCL_DLL_API void_ppp mclb_mul11;
extern "C" void mclb_mul_slow11(Unit *z, const Unit *x, const Unit *y);
extern "C" void mclb_mul_fast11(Unit *z, const Unit *x, const Unit *y);
#else
extern "C" MCL_DLL_API void mclb_mul11(Unit *z, const Unit *x, const Unit *y);
#endif
template<> inline void mulT<11>(Unit *z, const Unit *x, const Unit *y) { mclb_mul11(z, x, y); }
#if MCL_BINT_ASM_X64 == 1
extern "C" MCL_DLL_API void_pp mclb_sqr11;
extern "C" void mclb_sqr_slow11(Unit *y, const Unit *x);
extern "C" void mclb_sqr_fast11(Unit *y, const Unit *x);
#else
extern "C" MCL_DLL_API void mclb_sqr11(Unit *y, const Unit *x);
#endif
template<> inline void sqrT<11>(Unit *y, const Unit *x) { mclb_sqr11(y, x); }
#if MCL_BINT_ASM_X64 == 1
extern "C" MCL_DLL_API u_ppu mclb_mulUnit12;
extern "C" Unit mclb_mulUnit_slow12(Unit *z, const Unit *x, Unit y);
extern "C" Unit mclb_mulUnit_fast12(Unit *z, const Unit *x, Unit y);
#else
extern "C" MCL_DLL_API Unit mclb_mulUnit12(Unit *z, const Unit *x, Unit y);
#endif
template<> inline Unit mulUnitT<12>(Unit *z, const Unit *x, Unit y) { return mclb_mulUnit12(z, x, y); }
#if MCL_BINT_ASM_X64 == 1
extern "C" MCL_DLL_API u_ppu mclb_mulUnitAdd12;
extern "C" Unit mclb_mulUnitAdd_slow12(Unit *z, const Unit *x, Unit y);
extern "C" Unit mclb_mulUnitAdd_fast12(Unit *z, const Unit *x, Unit y);
#else
extern "C" MCL_DLL_API Unit mclb_mulUnitAdd12(Unit *z, const Unit *x, Unit y);
#endif
template<> inline Unit mulUnitAddT<12>(Unit *z, const Unit *x, Unit y) { return mclb_mulUnitAdd12(z, x, y); }
#if MCL_BINT_ASM_X64 == 1
extern "C" MCL_DLL_API void_ppp mclb_mul12;
extern "C" void mclb_mul_slow12(Unit *z, const Unit *x, const Unit *y);
extern "C" void mclb_mul_fast12(Unit *z, const Unit *x, const Unit *y);
#else
extern "C" MCL_DLL_API void mclb_mul12(Unit *z, const Unit *x, const Unit *y);
#endif
template<> inline void mulT<12>(Unit *z, const Unit *x, const Unit *y) { mclb_mul12(z, x, y); }
#if MCL_BINT_ASM_X64 == 1
extern "C" MCL_DLL_API void_pp mclb_sqr12;
extern "C" void mclb_sqr_slow12(Unit *y, const Unit *x);
extern "C" void mclb_sqr_fast12(Unit *y, const Unit *x);
#else
extern "C" MCL_DLL_API void mclb_sqr12(Unit *y, const Unit *x);
#endif
template<> inline void sqrT<12>(Unit *y, const Unit *x) { mclb_sqr12(y, x); }
#if MCL_BINT_ASM_X64 == 1
extern "C" MCL_DLL_API u_ppu mclb_mulUnit13;
extern "C" Unit mclb_mulUnit_slow13(Unit *z, const Unit *x, Unit y);
extern "C" Unit mclb_mulUnit_fast13(Unit *z, const Unit *x, Unit y);
#else
extern "C" MCL_DLL_API Unit mclb_mulUnit13(Unit *z, const Unit *x, Unit y);
#endif
template<> inline Unit mulUnitT<13>(Unit *z, const Unit *x, Unit y) { return mclb_mulUnit13(z, x, y); }
#if MCL_BINT_ASM_X64 == 1
extern "C" MCL_DLL_API u_ppu mclb_mulUnitAdd13;
extern "C" Unit mclb_mulUnitAdd_slow13(Unit *z, const Unit *x, Unit y);
extern "C" Unit mclb_mulUnitAdd_fast13(Unit *z, const Unit *x, Unit y);
#else
extern "C" MCL_DLL_API Unit mclb_mulUnitAdd13(Unit *z, const Unit *x, Unit y);
#endif
template<> inline Unit mulUnitAddT<13>(Unit *z, const Unit *x, Unit y) { return mclb_mulUnitAdd13(z, x, y); }
#if MCL_BINT_ASM_X64 == 1
extern "C" MCL_DLL_API void_ppp mclb_mul13;
extern "C" void mclb_mul_slow13(Unit *z, const Unit *x, const Unit *y);
extern "C" void mclb_mul_fast13(Unit *z, const Unit *x, const Unit *y);
#else
extern "C" MCL_DLL_API void mclb_mul13(Unit *z, const Unit *x, const Unit *y);
#endif
template<> inline void mulT<13>(Unit *z, const Unit *x, const Unit *y) { mclb_mul13(z, x, y); }
#if MCL_BINT_ASM_X64 == 1
extern "C" MCL_DLL_API void_pp mclb_sqr13;
extern "C" void mclb_sqr_slow13(Unit *y, const Unit *x);
extern "C" void mclb_sqr_fast13(Unit *y, const Unit *x);
#else
extern "C" MCL_DLL_API void mclb_sqr13(Unit *y, const Unit *x);
#endif
template<> inline void sqrT<13>(Unit *y, const Unit *x) { mclb_sqr13(y, x); }
#if MCL_BINT_ASM_X64 == 1
extern "C" MCL_DLL_API u_ppu mclb_mulUnit14;
extern "C" Unit mclb_mulUnit_slow14(Unit *z, const Unit *x, Unit y);
extern "C" Unit mclb_mulUnit_fast14(Unit *z, const Unit *x, Unit y);
#else
extern "C" MCL_DLL_API Unit mclb_mulUnit14(Unit *z, const Unit *x, Unit y);
#endif
template<> inline Unit mulUnitT<14>(Unit *z, const Unit *x, Unit y) { return mclb_mulUnit14(z, x, y); }
#if MCL_BINT_ASM_X64 == 1
extern "C" MCL_DLL_API u_ppu mclb_mulUnitAdd14;
extern "C" Unit mclb_mulUnitAdd_slow14(Unit *z, const Unit *x, Unit y);
extern "C" Unit mclb_mulUnitAdd_fast14(Unit *z, const Unit *x, Unit y);
#else
extern "C" MCL_DLL_API Unit mclb_mulUnitAdd14(Unit *z, const Unit *x, Unit y);
#endif
template<> inline Unit mulUnitAddT<14>(Unit *z, const Unit *x, Unit y) { return mclb_mulUnitAdd14(z, x, y); }
#if MCL_BINT_ASM_X64 == 1
extern "C" MCL_DLL_API void_ppp mclb_mul14;
extern "C" void mclb_mul_slow14(Unit *z, const Unit *x, const Unit *y);
extern "C" void mclb_mul_fast14(Unit *z, const Unit *x, const Unit *y);
#else
extern "C" MCL_DLL_API void mclb_mul14(Unit *z, const Unit *x, const Unit *y);
#endif
template<> inline void mulT<14>(Unit *z, const Unit *x, const Unit *y) { mclb_mul14(z, x, y); }
#if MCL_BINT_ASM_X64 == 1
extern "C" MCL_DLL_API void_pp mclb_sqr14;
extern "C" void mclb_sqr_slow14(Unit *y, const Unit *x);
extern "C" void mclb_sqr_fast14(Unit *y, const Unit *x);
#else
extern "C" MCL_DLL_API void mclb_sqr14(Unit *y, const Unit *x);
#endif
template<> inline void sqrT<14>(Unit *y, const Unit *x) { mclb_sqr14(y, x); }
#if MCL_BINT_ASM_X64 == 1
extern "C" MCL_DLL_API u_ppu mclb_mulUnit15;
extern "C" Unit mclb_mulUnit_slow15(Unit *z, const Unit *x, Unit y);
extern "C" Unit mclb_mulUnit_fast15(Unit *z, const Unit *x, Unit y);
#else
extern "C" MCL_DLL_API Unit mclb_mulUnit15(Unit *z, const Unit *x, Unit y);
#endif
template<> inline Unit mulUnitT<15>(Unit *z, const Unit *x, Unit y) { return mclb_mulUnit15(z, x, y); }
#if MCL_BINT_ASM_X64 == 1
extern "C" MCL_DLL_API u_ppu mclb_mulUnitAdd15;
extern "C" Unit mclb_mulUnitAdd_slow15(Unit *z, const Unit *x, Unit y);
extern "C" Unit mclb_mulUnitAdd_fast15(Unit *z, const Unit *x, Unit y);
#else
extern "C" MCL_DLL_API Unit mclb_mulUnitAdd15(Unit *z, const Unit *x, Unit y);
#endif
template<> inline Unit mulUnitAddT<15>(Unit *z, const Unit *x, Unit y) { return mclb_mulUnitAdd15(z, x, y); }
#if MCL_BINT_ASM_X64 == 1
extern "C" MCL_DLL_API void_ppp mclb_mul15;
extern "C" void mclb_mul_slow15(Unit *z, const Unit *x, const Unit *y);
extern "C" void mclb_mul_fast15(Unit *z, const Unit *x, const Unit *y);
#else
extern "C" MCL_DLL_API void mclb_mul15(Unit *z, const Unit *x, const Unit *y);
#endif
template<> inline void mulT<15>(Unit *z, const Unit *x, const Unit *y) { mclb_mul15(z, x, y); }
#if MCL_BINT_ASM_X64 == 1
extern "C" MCL_DLL_API void_pp mclb_sqr15;
extern "C" void mclb_sqr_slow15(Unit *y, const Unit *x);
extern "C" void mclb_sqr_fast15(Unit *y, const Unit *x);
#else
extern "C" MCL_DLL_API void mclb_sqr15(Unit *y, const Unit *x);
#endif
template<> inline void sqrT<15>(Unit *y, const Unit *x) { mclb_sqr15(y, x); }
#if MCL_BINT_ASM_X64 == 1
extern "C" MCL_DLL_API u_ppu mclb_mulUnit16;
extern "C" Unit mclb_mulUnit_slow16(Unit *z, const Unit *x, Unit y);
extern "C" Unit mclb_mulUnit_fast16(Unit *z, const Unit *x, Unit y);
#else
extern "C" MCL_DLL_API Unit mclb_mulUnit16(Unit *z, const Unit *x, Unit y);
#endif
template<> inline Unit mulUnitT<16>(Unit *z, const Unit *x, Unit y) { return mclb_mulUnit16(z, x, y); }
#if MCL_BINT_ASM_X64 == 1
extern "C" MCL_DLL_API u_ppu mclb_mulUnitAdd16;
extern "C" Unit mclb_mulUnitAdd_slow16(Unit *z, const Unit *x, Unit y);
extern "C" Unit mclb_mulUnitAdd_fast16(Unit *z, const Unit *x, Unit y);
#else
extern "C" MCL_DLL_API Unit mclb_mulUnitAdd16(Unit *z, const Unit *x, Unit y);
#endif
template<> inline Unit mulUnitAddT<16>(Unit *z, const Unit *x, Unit y) { return mclb_mulUnitAdd16(z, x, y); }
#if MCL_BINT_ASM_X64 == 1
extern "C" MCL_DLL_API void_ppp mclb_mul16;
extern "C" void mclb_mul_slow16(Unit *z, const Unit *x, const Unit *y);
extern "C" void mclb_mul_fast16(Unit *z, const Unit *x, const Unit *y);
#else
extern "C" MCL_DLL_API void mclb_mul16(Unit *z, const Unit *x, const Unit *y);
#endif
template<> inline void mulT<16>(Unit *z, const Unit *x, const Unit *y) { mclb_mul16(z, x, y); }
#if MCL_BINT_ASM_X64 == 1
extern "C" MCL_DLL_API void_pp mclb_sqr16;
extern "C" void mclb_sqr_slow16(Unit *y, const Unit *x);
extern "C" void mclb_sqr_fast16(Unit *y, const Unit *x);
#else
extern "C" MCL_DLL_API void mclb_sqr16(Unit *y, const Unit *x);
#endif
template<> inline void sqrT<16>(Unit *y, const Unit *x) { mclb_sqr16(y, x); }
#if MCL_BINT_ASM_X64 == 1
extern "C" MCL_DLL_API u_ppu mclb_mulUnit17;
extern "C" Unit mclb_mulUnit_slow17(Unit *z, const Unit *x, Unit y);
extern "C" Unit mclb_mulUnit_fast17(Unit *z, const Unit *x, Unit y);
#else
extern "C" MCL_DLL_API Unit mclb_mulUnit17(Unit *z, const Unit *x, Unit y);
#endif
template<> inline Unit mulUnitT<17>(Unit *z, const Unit *x, Unit y) { return mclb_mulUnit17(z, x, y); }
#if MCL_BINT_ASM_X64 == 1
extern "C" MCL_DLL_API u_ppu mclb_mulUnitAdd17;
extern "C" Unit mclb_mulUnitAdd_slow17(Unit *z, const Unit *x, Unit y);
extern "C" Unit mclb_mulUnitAdd_fast17(Unit *z, const Unit *x, Unit y);
#else
extern "C" MCL_DLL_API Unit mclb_mulUnitAdd17(Unit *z, const Unit *x, Unit y);
#endif
template<> inline Unit mulUnitAddT<17>(Unit *z, const Unit *x, Unit y) { return mclb_mulUnitAdd17(z, x, y); }
#if MCL_BINT_ASM_X64 == 1
extern "C" MCL_DLL_API void_ppp mclb_mul17;
extern "C" void mclb_mul_slow17(Unit *z, const Unit *x, const Unit *y);
extern "C" void mclb_mul_fast17(Unit *z, const Unit *x, const Unit *y);
#else
extern "C" MCL_DLL_API void mclb_mul17(Unit *z, const Unit *x, const Unit *y);
#endif
template<> inline void mulT<17>(Unit *z, const Unit *x, const Unit *y) { mclb_mul17(z, x, y); }
#if MCL_BINT_ASM_X64 == 1
extern "C" MCL_DLL_API void_pp mclb_sqr17;
extern "C" void mclb_sqr_slow17(Unit *y, const Unit *x);
extern "C" void mclb_sqr_fast17(Unit *y, const Unit *x);
#else
extern "C" MCL_DLL_API void mclb_sqr17(Unit *y, const Unit *x);
#endif
template<> inline void sqrT<17>(Unit *y, const Unit *x) { mclb_sqr17(y, x); }
#endif // #if MCL_SIZEOF_UNIT == 4
#endif // #if MCL_BINT_ASM == 1
#if MCL_SIZEOF_UNIT == 8
	#define MCL_BINT_ADD_N 16
	#define MCL_BINT_MUL_N 9
#else
	#define MCL_BINT_ADD_N 32
	#define MCL_BINT_MUL_N 17
#endif
inline u_ppp get_add(size_t n)
{
#if MCL_BINT_ASM == 1
	if (n == 1) return mclb_add1;
	if (n == 2) return mclb_add2;
	if (n == 3) return mclb_add3;
	if (n == 4) return mclb_add4;
	if (n == 5) return mclb_add5;
	if (n == 6) return mclb_add6;
	if (n == 7) return mclb_add7;
	if (n == 8) return mclb_add8;
	if (n == 9) return mclb_add9;
	if (n == 10) return mclb_add10;
	if (n == 11) return mclb_add11;
	if (n == 12) return mclb_add12;
	if (n == 13) return mclb_add13;
	if (n == 14) return mclb_add14;
	if (n == 15) return mclb_add15;
	if (n == 16) return mclb_add16;
#if MCL_SIZEOF_UNIT == 4
	if (n == 17) return mclb_add17;
	if (n == 18) return mclb_add18;
	if (n == 19) return mclb_add19;
	if (n == 20) return mclb_add20;
	if (n == 21) return mclb_add21;
	if (n == 22) return mclb_add22;
	if (n == 23) return mclb_add23;
	if (n == 24) return mclb_add24;
	if (n == 25) return mclb_add25;
	if (n == 26) return mclb_add26;
	if (n == 27) return mclb_add27;
	if (n == 28) return mclb_add28;
	if (n == 29) return mclb_add29;
	if (n == 30) return mclb_add30;
	if (n == 31) return mclb_add31;
#endif // MCL_SIZEOF_UNIT == 4
#else // MCL_BITN_ASM == 1
	if (n == 1) return addT<1>;
	if (n == 2) return addT<2>;
	if (n == 3) return addT<3>;
	if (n == 4) return addT<4>;
	if (n == 5) return addT<5>;
	if (n == 6) return addT<6>;
	if (n == 7) return addT<7>;
	if (n == 8) return addT<8>;
	if (n == 9) return addT<9>;
	if (n == 10) return addT<10>;
	if (n == 11) return addT<11>;
	if (n == 12) return addT<12>;
	if (n == 13) return addT<13>;
	if (n == 14) return addT<14>;
	if (n == 15) return addT<15>;
	if (n == 16) return addT<16>;
#if MCL_SIZEOF_UNIT == 4
	if (n == 17) return addT<17>;
	if (n == 18) return addT<18>;
	if (n == 19) return addT<19>;
	if (n == 20) return addT<20>;
	if (n == 21) return addT<21>;
	if (n == 22) return addT<22>;
	if (n == 23) return addT<23>;
	if (n == 24) return addT<24>;
	if (n == 25) return addT<25>;
	if (n == 26) return addT<26>;
	if (n == 27) return addT<27>;
	if (n == 28) return addT<28>;
	if (n == 29) return addT<29>;
	if (n == 30) return addT<30>;
	if (n == 31) return addT<31>;
#endif // MCL_SIZEOF_UNIT == 4
#endif // MCL_BINT_ASM == 1
	CYBOZU_ASSUME(false);
}
inline Unit addN(Unit *z, const Unit *x, const Unit *y, size_t n)
{
	return get_add(n)(z, x, y);
}
inline u_ppp get_sub(size_t n)
{
#if MCL_BINT_ASM == 1
	if (n == 1) return mclb_sub1;
	if (n == 2) return mclb_sub2;
	if (n == 3) return mclb_sub3;
	if (n == 4) return mclb_sub4;
	if (n == 5) return mclb_sub5;
	if (n == 6) return mclb_sub6;
	if (n == 7) return mclb_sub7;
	if (n == 8) return mclb_sub8;
	if (n == 9) return mclb_sub9;
	if (n == 10) return mclb_sub10;
	if (n == 11) return mclb_sub11;
	if (n == 12) return mclb_sub12;
	if (n == 13) return mclb_sub13;
	if (n == 14) return mclb_sub14;
	if (n == 15) return mclb_sub15;
	if (n == 16) return mclb_sub16;
#if MCL_SIZEOF_UNIT == 4
	if (n == 17) return mclb_sub17;
	if (n == 18) return mclb_sub18;
	if (n == 19) return mclb_sub19;
	if (n == 20) return mclb_sub20;
	if (n == 21) return mclb_sub21;
	if (n == 22) return mclb_sub22;
	if (n == 23) return mclb_sub23;
	if (n == 24) return mclb_sub24;
	if (n == 25) return mclb_sub25;
	if (n == 26) return mclb_sub26;
	if (n == 27) return mclb_sub27;
	if (n == 28) return mclb_sub28;
	if (n == 29) return mclb_sub29;
	if (n == 30) return mclb_sub30;
	if (n == 31) return mclb_sub31;
#endif // MCL_SIZEOF_UNIT == 4
#else // MCL_BITN_ASM == 1
	if (n == 1) return subT<1>;
	if (n == 2) return subT<2>;
	if (n == 3) return subT<3>;
	if (n == 4) return subT<4>;
	if (n == 5) return subT<5>;
	if (n == 6) return subT<6>;
	if (n == 7) return subT<7>;
	if (n == 8) return subT<8>;
	if (n == 9) return subT<9>;
	if (n == 10) return subT<10>;
	if (n == 11) return subT<11>;
	if (n == 12) return subT<12>;
	if (n == 13) return subT<13>;
	if (n == 14) return subT<14>;
	if (n == 15) return subT<15>;
	if (n == 16) return subT<16>;
#if MCL_SIZEOF_UNIT == 4
	if (n == 17) return subT<17>;
	if (n == 18) return subT<18>;
	if (n == 19) return subT<19>;
	if (n == 20) return subT<20>;
	if (n == 21) return subT<21>;
	if (n == 22) return subT<22>;
	if (n == 23) return subT<23>;
	if (n == 24) return subT<24>;
	if (n == 25) return subT<25>;
	if (n == 26) return subT<26>;
	if (n == 27) return subT<27>;
	if (n == 28) return subT<28>;
	if (n == 29) return subT<29>;
	if (n == 30) return subT<30>;
	if (n == 31) return subT<31>;
#endif // MCL_SIZEOF_UNIT == 4
#endif // MCL_BINT_ASM == 1
	CYBOZU_ASSUME(false);
}
inline Unit subN(Unit *z, const Unit *x, const Unit *y, size_t n)
{
	return get_sub(n)(z, x, y);
}
inline void_ppp get_addNF(size_t n)
{
#if MCL_BINT_ASM == 1
	if (n == 1) return mclb_addNF1;
	if (n == 2) return mclb_addNF2;
	if (n == 3) return mclb_addNF3;
	if (n == 4) return mclb_addNF4;
	if (n == 5) return mclb_addNF5;
	if (n == 6) return mclb_addNF6;
	if (n == 7) return mclb_addNF7;
	if (n == 8) return mclb_addNF8;
	if (n == 9) return mclb_addNF9;
	if (n == 10) return mclb_addNF10;
	if (n == 11) return mclb_addNF11;
	if (n == 12) return mclb_addNF12;
	if (n == 13) return mclb_addNF13;
	if (n == 14) return mclb_addNF14;
	if (n == 15) return mclb_addNF15;
	if (n == 16) return mclb_addNF16;
#if MCL_SIZEOF_UNIT == 4
	if (n == 17) return mclb_addNF17;
	if (n == 18) return mclb_addNF18;
	if (n == 19) return mclb_addNF19;
	if (n == 20) return mclb_addNF20;
	if (n == 21) return mclb_addNF21;
	if (n == 22) return mclb_addNF22;
	if (n == 23) return mclb_addNF23;
	if (n == 24) return mclb_addNF24;
	if (n == 25) return mclb_addNF25;
	if (n == 26) return mclb_addNF26;
	if (n == 27) return mclb_addNF27;
	if (n == 28) return mclb_addNF28;
	if (n == 29) return mclb_addNF29;
	if (n == 30) return mclb_addNF30;
	if (n == 31) return mclb_addNF31;
#endif // MCL_SIZEOF_UNIT == 4
#else // MCL_BITN_ASM == 1
	if (n == 1) return addNFT<1>;
	if (n == 2) return addNFT<2>;
	if (n == 3) return addNFT<3>;
	if (n == 4) return addNFT<4>;
	if (n == 5) return addNFT<5>;
	if (n == 6) return addNFT<6>;
	if (n == 7) return addNFT<7>;
	if (n == 8) return addNFT<8>;
	if (n == 9) return addNFT<9>;
	if (n == 10) return addNFT<10>;
	if (n == 11) return addNFT<11>;
	if (n == 12) return addNFT<12>;
	if (n == 13) return addNFT<13>;
	if (n == 14) return addNFT<14>;
	if (n == 15) return addNFT<15>;
	if (n == 16) return addNFT<16>;
#if MCL_SIZEOF_UNIT == 4
	if (n == 17) return addNFT<17>;
	if (n == 18) return addNFT<18>;
	if (n == 19) return addNFT<19>;
	if (n == 20) return addNFT<20>;
	if (n == 21) return addNFT<21>;
	if (n == 22) return addNFT<22>;
	if (n == 23) return addNFT<23>;
	if (n == 24) return addNFT<24>;
	if (n == 25) return addNFT<25>;
	if (n == 26) return addNFT<26>;
	if (n == 27) return addNFT<27>;
	if (n == 28) return addNFT<28>;
	if (n == 29) return addNFT<29>;
	if (n == 30) return addNFT<30>;
	if (n == 31) return addNFT<31>;
#endif // MCL_SIZEOF_UNIT == 4
#endif // MCL_BINT_ASM == 1
	CYBOZU_ASSUME(false);
}
inline void addNFN(Unit *z, const Unit *x, const Unit *y, size_t n)
{
	return get_addNF(n)(z, x, y);
}
inline u_ppp get_subNF(size_t n)
{
#if MCL_BINT_ASM == 1
	if (n == 1) return mclb_subNF1;
	if (n == 2) return mclb_subNF2;
	if (n == 3) return mclb_subNF3;
	if (n == 4) return mclb_subNF4;
	if (n == 5) return mclb_subNF5;
	if (n == 6) return mclb_subNF6;
	if (n == 7) return mclb_subNF7;
	if (n == 8) return mclb_subNF8;
	if (n == 9) return mclb_subNF9;
	if (n == 10) return mclb_subNF10;
	if (n == 11) return mclb_subNF11;
	if (n == 12) return mclb_subNF12;
	if (n == 13) return mclb_subNF13;
	if (n == 14) return mclb_subNF14;
	if (n == 15) return mclb_subNF15;
	if (n == 16) return mclb_subNF16;
#if MCL_SIZEOF_UNIT == 4
	if (n == 17) return mclb_subNF17;
	if (n == 18) return mclb_subNF18;
	if (n == 19) return mclb_subNF19;
	if (n == 20) return mclb_subNF20;
	if (n == 21) return mclb_subNF21;
	if (n == 22) return mclb_subNF22;
	if (n == 23) return mclb_subNF23;
	if (n == 24) return mclb_subNF24;
	if (n == 25) return mclb_subNF25;
	if (n == 26) return mclb_subNF26;
	if (n == 27) return mclb_subNF27;
	if (n == 28) return mclb_subNF28;
	if (n == 29) return mclb_subNF29;
	if (n == 30) return mclb_subNF30;
	if (n == 31) return mclb_subNF31;
#endif // MCL_SIZEOF_UNIT == 4
#else // MCL_BITN_ASM == 1
	if (n == 1) return subNFT<1>;
	if (n == 2) return subNFT<2>;
	if (n == 3) return subNFT<3>;
	if (n == 4) return subNFT<4>;
	if (n == 5) return subNFT<5>;
	if (n == 6) return subNFT<6>;
	if (n == 7) return subNFT<7>;
	if (n == 8) return subNFT<8>;
	if (n == 9) return subNFT<9>;
	if (n == 10) return subNFT<10>;
	if (n == 11) return subNFT<11>;
	if (n == 12) return subNFT<12>;
	if (n == 13) return subNFT<13>;
	if (n == 14) return subNFT<14>;
	if (n == 15) return subNFT<15>;
	if (n == 16) return subNFT<16>;
#if MCL_SIZEOF_UNIT == 4
	if (n == 17) return subNFT<17>;
	if (n == 18) return subNFT<18>;
	if (n == 19) return subNFT<19>;
	if (n == 20) return subNFT<20>;
	if (n == 21) return subNFT<21>;
	if (n == 22) return subNFT<22>;
	if (n == 23) return subNFT<23>;
	if (n == 24) return subNFT<24>;
	if (n == 25) return subNFT<25>;
	if (n == 26) return subNFT<26>;
	if (n == 27) return subNFT<27>;
	if (n == 28) return subNFT<28>;
	if (n == 29) return subNFT<29>;
	if (n == 30) return subNFT<30>;
	if (n == 31) return subNFT<31>;
#endif // MCL_SIZEOF_UNIT == 4
#endif // MCL_BINT_ASM == 1
	CYBOZU_ASSUME(false);
}
inline Unit subNFN(Unit *z, const Unit *x, const Unit *y, size_t n)
{
	return get_subNF(n)(z, x, y);
}
inline u_ppu get_mulUnit(size_t n)
{
#if MCL_BINT_ASM == 1
	if (n == 1) return mclb_mulUnit1;
	if (n == 2) return mclb_mulUnit2;
	if (n == 3) return mclb_mulUnit3;
	if (n == 4) return mclb_mulUnit4;
	if (n == 5) return mclb_mulUnit5;
	if (n == 6) return mclb_mulUnit6;
	if (n == 7) return mclb_mulUnit7;
	if (n == 8) return mclb_mulUnit8;
	if (n == 9) return mclb_mulUnit9;
#if MCL_SIZEOF_UNIT == 4
	if (n == 10) return mclb_mulUnit10;
	if (n == 11) return mclb_mulUnit11;
	if (n == 12) return mclb_mulUnit12;
	if (n == 13) return mclb_mulUnit13;
	if (n == 14) return mclb_mulUnit14;
	if (n == 15) return mclb_mulUnit15;
	if (n == 16) return mclb_mulUnit16;
#endif // MCL_SIZEOF_UNIT == 4
#else // MCL_BITN_ASM == 1
	if (n == 1) return mulUnitT<1>;
	if (n == 2) return mulUnitT<2>;
	if (n == 3) return mulUnitT<3>;
	if (n == 4) return mulUnitT<4>;
	if (n == 5) return mulUnitT<5>;
	if (n == 6) return mulUnitT<6>;
	if (n == 7) return mulUnitT<7>;
	if (n == 8) return mulUnitT<8>;
	if (n == 9) return mulUnitT<9>;
#if MCL_SIZEOF_UNIT == 4
	if (n == 10) return mulUnitT<10>;
	if (n == 11) return mulUnitT<11>;
	if (n == 12) return mulUnitT<12>;
	if (n == 13) return mulUnitT<13>;
	if (n == 14) return mulUnitT<14>;
	if (n == 15) return mulUnitT<15>;
	if (n == 16) return mulUnitT<16>;
#endif // MCL_SIZEOF_UNIT == 4
#endif // MCL_BINT_ASM == 1
	CYBOZU_ASSUME(false);
}
inline Unit mulUnitN(Unit *z, const Unit *x, Unit y, size_t n)
{
	return get_mulUnit(n)(z, x, y);
}
inline u_ppu get_mulUnitAdd(size_t n)
{
#if MCL_BINT_ASM == 1
	if (n == 1) return mclb_mulUnitAdd1;
	if (n == 2) return mclb_mulUnitAdd2;
	if (n == 3) return mclb_mulUnitAdd3;
	if (n == 4) return mclb_mulUnitAdd4;
	if (n == 5) return mclb_mulUnitAdd5;
	if (n == 6) return mclb_mulUnitAdd6;
	if (n == 7) return mclb_mulUnitAdd7;
	if (n == 8) return mclb_mulUnitAdd8;
	if (n == 9) return mclb_mulUnitAdd9;
#if MCL_SIZEOF_UNIT == 4
	if (n == 10) return mclb_mulUnitAdd10;
	if (n == 11) return mclb_mulUnitAdd11;
	if (n == 12) return mclb_mulUnitAdd12;
	if (n == 13) return mclb_mulUnitAdd13;
	if (n == 14) return mclb_mulUnitAdd14;
	if (n == 15) return mclb_mulUnitAdd15;
	if (n == 16) return mclb_mulUnitAdd16;
#endif // MCL_SIZEOF_UNIT == 4
#else // MCL_BITN_ASM == 1
	if (n == 1) return mulUnitAddT<1>;
	if (n == 2) return mulUnitAddT<2>;
	if (n == 3) return mulUnitAddT<3>;
	if (n == 4) return mulUnitAddT<4>;
	if (n == 5) return mulUnitAddT<5>;
	if (n == 6) return mulUnitAddT<6>;
	if (n == 7) return mulUnitAddT<7>;
	if (n == 8) return mulUnitAddT<8>;
	if (n == 9) return mulUnitAddT<9>;
#if MCL_SIZEOF_UNIT == 4
	if (n == 10) return mulUnitAddT<10>;
	if (n == 11) return mulUnitAddT<11>;
	if (n == 12) return mulUnitAddT<12>;
	if (n == 13) return mulUnitAddT<13>;
	if (n == 14) return mulUnitAddT<14>;
	if (n == 15) return mulUnitAddT<15>;
	if (n == 16) return mulUnitAddT<16>;
#endif // MCL_SIZEOF_UNIT == 4
#endif // MCL_BINT_ASM == 1
	CYBOZU_ASSUME(false);
}
inline Unit mulUnitAddN(Unit *z, const Unit *x, Unit y, size_t n)
{
	return get_mulUnitAdd(n)(z, x, y);
}
inline void_ppp get_mul(size_t n)
{
#if MCL_BINT_ASM == 1
	if (n == 1) return mclb_mul1;
	if (n == 2) return mclb_mul2;
	if (n == 3) return mclb_mul3;
	if (n == 4) return mclb_mul4;
	if (n == 5) return mclb_mul5;
	if (n == 6) return mclb_mul6;
	if (n == 7) return mclb_mul7;
	if (n == 8) return mclb_mul8;
	if (n == 9) return mclb_mul9;
#if MCL_SIZEOF_UNIT == 4
	if (n == 10) return mclb_mul10;
	if (n == 11) return mclb_mul11;
	if (n == 12) return mclb_mul12;
	if (n == 13) return mclb_mul13;
	if (n == 14) return mclb_mul14;
	if (n == 15) return mclb_mul15;
	if (n == 16) return mclb_mul16;
#endif // MCL_SIZEOF_UNIT == 4
#else // MCL_BITN_ASM == 1
	if (n == 1) return mulT<1>;
	if (n == 2) return mulT<2>;
	if (n == 3) return mulT<3>;
	if (n == 4) return mulT<4>;
	if (n == 5) return mulT<5>;
	if (n == 6) return mulT<6>;
	if (n == 7) return mulT<7>;
	if (n == 8) return mulT<8>;
	if (n == 9) return mulT<9>;
#if MCL_SIZEOF_UNIT == 4
	if (n == 10) return mulT<10>;
	if (n == 11) return mulT<11>;
	if (n == 12) return mulT<12>;
	if (n == 13) return mulT<13>;
	if (n == 14) return mulT<14>;
	if (n == 15) return mulT<15>;
	if (n == 16) return mulT<16>;
#endif // MCL_SIZEOF_UNIT == 4
#endif // MCL_BINT_ASM == 1
	CYBOZU_ASSUME(false);
}
inline void mulN(Unit *z, const Unit *x, const Unit *y, size_t n)
{
	return get_mul(n)(z, x, y);
}
inline void_pp get_sqr(size_t n)
{
#if MCL_BINT_ASM == 1
	if (n == 1) return mclb_sqr1;
	if (n == 2) return mclb_sqr2;
	if (n == 3) return mclb_sqr3;
	if (n == 4) return mclb_sqr4;
	if (n == 5) return mclb_sqr5;
	if (n == 6) return mclb_sqr6;
	if (n == 7) return mclb_sqr7;
	if (n == 8) return mclb_sqr8;
	if (n == 9) return mclb_sqr9;
#if MCL_SIZEOF_UNIT == 4
	if (n == 10) return mclb_sqr10;
	if (n == 11) return mclb_sqr11;
	if (n == 12) return mclb_sqr12;
	if (n == 13) return mclb_sqr13;
	if (n == 14) return mclb_sqr14;
	if (n == 15) return mclb_sqr15;
	if (n == 16) return mclb_sqr16;
#endif // MCL_SIZEOF_UNIT == 4
#else // MCL_BITN_ASM == 1
	if (n == 1) return sqrT<1>;
	if (n == 2) return sqrT<2>;
	if (n == 3) return sqrT<3>;
	if (n == 4) return sqrT<4>;
	if (n == 5) return sqrT<5>;
	if (n == 6) return sqrT<6>;
	if (n == 7) return sqrT<7>;
	if (n == 8) return sqrT<8>;
	if (n == 9) return sqrT<9>;
#if MCL_SIZEOF_UNIT == 4
	if (n == 10) return sqrT<10>;
	if (n == 11) return sqrT<11>;
	if (n == 12) return sqrT<12>;
	if (n == 13) return sqrT<13>;
	if (n == 14) return sqrT<14>;
	if (n == 15) return sqrT<15>;
	if (n == 16) return sqrT<16>;
#endif // MCL_SIZEOF_UNIT == 4
#endif // MCL_BINT_ASM == 1
	CYBOZU_ASSUME(false);
}
inline void sqrN(Unit *y, const Unit *x, size_t n)
{
	return get_sqr(n)(y, x);
}
